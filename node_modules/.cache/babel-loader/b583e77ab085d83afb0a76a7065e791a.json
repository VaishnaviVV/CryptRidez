{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst {\n  Blob\n} = require('ipfs-utils/src/globalthis');\n\nconst itPeekable = require('it-peekable');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst all = require('it-all');\n\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream\n} = require('./utils');\n/**\n * @param {import('./normalise-input').ToContent} input\n * @returns {Promise<Blob>}\n */\n\n\nasync function toBlob(input) {\n  // Bytes | String\n  if (isBytes(input) || typeof input === 'string' || input instanceof String) {\n    return new Blob([input]);\n  } // Blob | File\n\n\n  if (isBlob(input)) {\n    return input;\n  } // Browser stream\n\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  } // (Async)Iterator<?>\n\n\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n    /** @type {any} value **/\n\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable);\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))]);\n    } // (Async)Iterable<Bytes|String>\n\n\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable);\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n * @returns {Promise<Blob>}\n */\n\n\nasync function itToBlob(stream) {\n  const parts = [];\n\n  for await (const chunk of stream) {\n    parts.push(chunk);\n  }\n\n  return new Blob(parts);\n}\n\nmodule.exports = toBlob;","map":{"version":3,"sources":["/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-content.browser.js"],"names":["errCode","require","Blob","itPeekable","browserStreamToIt","all","isBytes","isBlob","isReadableStream","toBlob","input","String","Symbol","iterator","asyncIterator","peekable","value","done","peek","itToBlob","push","Number","isInteger","Uint8Array","from","Error","stream","parts","chunk","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAWD,OAAO,CAAC,2BAAD,CAAxB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,8BAAD,CAAjC;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,QAAD,CAAnB;;AAEA,MAAM;AACJK,EAAAA,OADI;AAEJC,EAAAA,MAFI;AAGJC,EAAAA;AAHI,IAIFP,OAAO,CAAC,SAAD,CAJX;AAMA;AACA;AACA;AACA;;;AACA,eAAeQ,MAAf,CAAuBC,KAAvB,EAA8B;AAC5B;AACA,MAAIJ,OAAO,CAACI,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYC,MAApE,EAA4E;AAC1E,WAAO,IAAIT,IAAJ,CAAS,CAACQ,KAAD,CAAT,CAAP;AACD,GAJ2B,CAM5B;;;AACA,MAAIH,MAAM,CAACG,KAAD,CAAV,EAAmB;AACjB,WAAOA,KAAP;AACD,GAT2B,CAW5B;;;AACA,MAAIF,gBAAgB,CAACE,KAAD,CAApB,EAA6B;AAC3BA,IAAAA,KAAK,GAAGN,iBAAiB,CAACM,KAAD,CAAzB;AACD,GAd2B,CAgB5B;;;AACA,MAAIA,KAAK,CAACE,MAAM,CAACC,QAAR,CAAL,IAA0BH,KAAK,CAACE,MAAM,CAACE,aAAR,CAAnC,EAA2D;AACzD;AACA,UAAMC,QAAQ,GAAGZ,UAAU,CAACO,KAAD,CAA3B;AAEA;;AACA,UAAM;AAAEM,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkB,MAAMF,QAAQ,CAACG,IAAT,EAA9B;;AAEA,QAAID,IAAJ,EAAU;AACR;AACA,aAAOE,QAAQ,CAACJ,QAAD,CAAf;AACD;;AAEDA,IAAAA,QAAQ,CAACK,IAAT,CAAcJ,KAAd,EAZyD,CAczD;;AACA,QAAIK,MAAM,CAACC,SAAP,CAAiBN,KAAjB,CAAJ,EAA6B;AAC3B,aAAO,IAAId,IAAJ,CAAS,CAACqB,UAAU,CAACC,IAAX,CAAgB,MAAMnB,GAAG,CAACU,QAAD,CAAzB,CAAD,CAAT,CAAP;AACD,KAjBwD,CAmBzD;;;AACA,QAAIT,OAAO,CAACU,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYL,MAApE,EAA4E;AAC1E,aAAOQ,QAAQ,CAACJ,QAAD,CAAf;AACD;AACF;;AAED,QAAMf,OAAO,CAAC,IAAIyB,KAAJ,CAAW,qBAAoBf,KAAM,EAArC,CAAD,EAA0C,sBAA1C,CAAb;AACD;AAED;AACA;AACA;AACA;;;AACA,eAAeS,QAAf,CAAyBO,MAAzB,EAAiC;AAC/B,QAAMC,KAAK,GAAG,EAAd;;AAEA,aAAW,MAAMC,KAAjB,IAA0BF,MAA1B,EAAkC;AAChCC,IAAAA,KAAK,CAACP,IAAN,CAAWQ,KAAX;AACD;;AAED,SAAO,IAAI1B,IAAJ,CAASyB,KAAT,CAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBrB,MAAjB","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { Blob } = require('ipfs-utils/src/globalthis')\nconst itPeekable = require('it-peekable')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst all = require('it-all')\n\nconst {\n  isBytes,\n  isBlob,\n  isReadableStream\n} = require('./utils')\n\n/**\n * @param {import('./normalise-input').ToContent} input\n * @returns {Promise<Blob>}\n */\nasync function toBlob (input) {\n  // Bytes | String\n  if (isBytes(input) || typeof input === 'string' || input instanceof String) {\n    return new Blob([input])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n * @returns {Promise<Blob>}\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n\nmodule.exports = toBlob\n"]},"metadata":{},"sourceType":"script"}