{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport '../App.css';\nimport user from '../abis/user.json';\nimport AuthNavBar from '../Components/AuthNavBar';\nimport Main from '../Components/Main';\nimport DriverID from '../Components/DriverID';\nimport User from '../Components/User'; //Declare IPFS\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nclass Dashboard extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3.providers.HttpProvider(\"127.0.0.1:9545\");\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3; // Load account\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    const unitbal = await web3.eth.getBalance(accounts[0]);\n    const balanceacc = await web3.utils.fromWei(unitbal, 'ether');\n    this.setState({\n      balance: balanceacc\n    });\n    const networkId = await web3.eth.net.getId();\n    const networkData = user.networks[networkId]; // console.log(networkData);\n\n    if (networkData) {\n      const User = new web3.eth.Contract(user.abi, networkData.address); // console.log(User); \n\n      this.setState({\n        User\n      });\n      const reqCounts = await User.methods.reqCount().call();\n      this.setState({\n        reqCounts\n      });\n      const imgCounts = await User.methods.imgCount().call();\n      console.log(imgCounts);\n      this.setState({\n        imgCounts\n      });\n      const rideCounts = await User.methods.rideCount().call();\n      this.setState({\n        rideCounts\n      }); //Load requests\n\n      for (var i = 1; i <= reqCounts; i++) {\n        const users_var = await User.methods.users(i).call();\n        this.setState({\n          users: [...this.state.users, users_var]\n        });\n      } //Load images\n\n\n      for (var j = 1; j <= imgCounts; j++) {\n        const img_var = await User.methods.driver(j).call();\n        this.setState({\n          driver: [...this.state.driver, img_var]\n        });\n      }\n      /** */\n\n\n      for (var k = 1; k <= rideCounts; k++) {\n        const ride_var = await User.methods.ride(k).call();\n        console.log(ride_var);\n        this.setState({\n          ride: [...this.state.ride, ride_var]\n        });\n      }\n    } else {\n      window.alert('User contract not deployed to detected network.');\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.rideReq = (source, destination, date, time) => {\n      this.setState({\n        loading: true\n      });\n      this.state.User.methods.rideReq(source, destination, date, time).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadRide = (source, destination, date, time, rider, amount) => {\n      this.setState({\n        loading: true\n      });\n      this.state.User.methods.uploadRide(source, destination, date, time, rider, amount).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadImaging = (drivername, hash, verified) => {\n      this.state.User.methods.uploadImage(hash, drivername, verified).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadImage = drivername => {\n      console.log(\"submitting file to ipfs...\");\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('Ipfs result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        this.setState({\n          loading: true\n        });\n        this.state.User.methods.uploadImg(result[0].hash, drivername, false).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.verifyDriver = (id, hashs, name, author) => {\n      this.state.User.methods.verifyDriver(id, hashs, name, author).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.tipImageOwner = (id, tipAmount) => {\n      this.setState({\n        loading: true\n      });\n      this.setState({\n        loading: false\n      });\n      this.state.cryptridez.methods.tipImageOwner(id).send({\n        from: this.state.account,\n        value: tipAmount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.rideAmount = (id, amount) => {\n      this.state.User.methods.ridePayment(id).send({\n        from: this.state.account,\n        value: amount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.state = {\n      balance: '',\n      account: '',\n      User: null,\n      users: [],\n      driver: [],\n      ride: [],\n      loading: true\n    };\n  }\n\n  render() {\n    let body;\n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236'];\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9'];\n\n    if (authorizedAccounts.includes(this.state.account)) {\n      body = /*#__PURE__*/_jsxDEV(Main, {\n        account: this.state.account,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadRide: this.uploadRide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this);\n    } else if (authorizedAccounts2.includes(this.state.account)) {\n      body = /*#__PURE__*/_jsxDEV(DriverID, {\n        account: this.state.account,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadImaging: this.uploadImaging,\n        verifyDriver: this.verifyDriver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this);\n    } else {\n      body = /*#__PURE__*/_jsxDEV(User, {\n        account: this.state.account,\n        rideReq: this.rideReq,\n        users: this.state.users,\n        uploadRide: this.uploadRide,\n        ride: this.state.ride,\n        rideAmount: this.rideAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AuthNavBar, {\n        account: this.state.account,\n        balance: this.state.balance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), body]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js"],"names":["React","Component","Web3","Identicon","user","AuthNavBar","Main","DriverID","User","ipfsClient","require","ipfs","host","port","protocol","Dashboard","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","providers","HttpProvider","alert","accounts","eth","getAccounts","setState","account","unitbal","getBalance","balanceacc","utils","fromWei","balance","networkId","net","getId","networkData","networks","Contract","abi","address","reqCounts","methods","reqCount","call","imgCounts","imgCount","console","log","rideCounts","rideCount","i","users_var","users","state","j","img_var","driver","k","ride_var","ride","constructor","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","rideReq","source","destination","date","time","loading","send","from","on","hash","uploadRide","rider","amount","uploadImaging","drivername","verified","uploadImage","add","error","uploadImg","verifyDriver","id","hashs","name","author","tipImageOwner","tipAmount","cryptridez","value","rideAmount","ridePayment","render","body","authorizedAccounts","authorizedAccounts2","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport '../App.css';\nimport user from '../abis/user.json'\nimport AuthNavBar from '../Components/AuthNavBar'\nimport Main from '../Components/Main'\nimport DriverID from '../Components/DriverID'\n\nimport User from '../Components/User'\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\n\nclass Dashboard extends Component {\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3.providers.HttpProvider(\"127.0.0.1:9545\")\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    \n\n    this.setState({ account: accounts[0] })\n    const unitbal = await web3.eth.getBalance(accounts[0])\n    const balanceacc = await web3.utils.fromWei(unitbal,'ether')\n\n    this.setState({balance: balanceacc})\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = user.networks[networkId]\n    // console.log(networkData);\n    \n    if (networkData) {\n      const User = new web3.eth.Contract(user.abi, networkData.address)\n      // console.log(User); \n\n      this.setState({ User })\n\n      const reqCounts = await User.methods.reqCount().call()\n      this.setState({ reqCounts })\n      \n      const imgCounts = await User.methods.imgCount().call()\n      console.log(imgCounts)\n      this.setState({ imgCounts })\n\n      const rideCounts = await User.methods.rideCount().call()\n      this.setState({ rideCounts })\n      \n      //Load requests\n      for (var i = 1; i <= reqCounts; i++) {\n        const users_var = await User.methods.users(i).call()\n\n        this.setState({\n          users: [...this.state.users,users_var]\n        })\n      }\n\n      //Load images\n      \n      for (var j=1; j<=imgCounts; j++){\n        const img_var = await User.methods.driver(j).call()\n\n        this.setState({\n          driver: [...this.state.driver,img_var]\n        })\n      }\n     /** */\n\n     for (var k=1; k<=rideCounts; k++){\n      const ride_var = await User.methods.ride(k).call()\n      console.log(ride_var);\n\n      this.setState({\n        ride: [...this.state.ride,ride_var]\n      })\n    }\n\n    } else {\n      window.alert('User contract not deployed to detected network.')\n    }\n\n  }\n\n  \n  captureFile = event => {\n\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  \n\n  rideReq = (source,destination,date,time) => {\n    this.setState({loading:true })\n      this.state.User.methods.rideReq(source,destination,date,time).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  uploadRide = (source,destination,date,time,rider,amount) => {\n    this.setState({loading:true })\n      this.state.User.methods.uploadRide(source,destination,date,time,rider,amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  \n\n  uploadImaging = (drivername,hash,verified) =>\n  {\n    this.state.User.methods.uploadImage(hash,drivername,verified).send({from: this.state.account}).on('transactionHash',(hash) => {\n      this.setState({loading:false})\n    })\n\n  }\n\n  uploadImage = drivername => {\n    console.log(\"submitting file to ipfs...\")\n\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      if (error) {\n        console.error(error)\n        return\n      }\n\n    this.setState({loading:true})\n      this.state.User.methods.uploadImg(result[0].hash,drivername,false).send({from: this.state.account}).on('transactionHash',(hash) => {\n        this.setState({loading:false})\n      })\n    })\n  }\n\n  verifyDriver = (id,hashs,name,author) => {\n\n  this.state.User.methods.verifyDriver(id,hashs,name,author).send({from: this.state.account}).on('transactionHash',(hash) => {\n    this.setState({loading:false})\n  })\n  }\n\n  tipImageOwner = (id, tipAmount) =>{\n    this.setState({ loading: true })\n    this.setState({ loading: false })\n    this.state.cryptridez.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  rideAmount = (id,amount) =>{\n    this.state.User.methods.ridePayment(id).send({ from: this.state.account, value: amount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      balance:'',\n      account: '',\n      User: null,\n      users:[],\n      driver:[],\n      ride:[],\n      loading: true,\n      \n    }\n  }\n  \n\n  render() {\n    let body\n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236']\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9']\n        if(authorizedAccounts.includes(this.state.account)){\n          \n          body = \n          <Main\n          account={this.state.account}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadRide = {this.uploadRide}\n        />\n        }\n        else if(authorizedAccounts2.includes(this.state.account)){\n          body = \n          <DriverID\n          account={this.state.account}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadImaging = {this.uploadImaging}\n          verifyDriver = {this.verifyDriver}\n        />\n\n        }\n        else{\n          body = \n          <User\n          account = {this.state.account}\n          rideReq = {this.rideReq} \n          users={this.state.users}\n          uploadRide = {this.uploadRide}\n          ride = {this.state.ride}\n          rideAmount = {this.rideAmount}\n          />\n                  }\n    \n    return (\n      <div>\n        <AuthNavBar account={this.state.account}\n        balance= {this.state.balance} />\n        { body }\n\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}