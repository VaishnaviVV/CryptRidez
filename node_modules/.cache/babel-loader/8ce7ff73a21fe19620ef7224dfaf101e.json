{"ast":null,"code":"/* eslint-disable no-undef */\n'use strict';\n\nconst {\n  fetch,\n  Request,\n  Headers\n} = require('./http/fetch');\n\nconst {\n  TimeoutError,\n  HTTPError\n} = require('./http/error');\n\nconst merge = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst {\n  URL,\n  URLSearchParams\n} = require('iso-url');\n\nconst TextDecoder = require('./text-decoder');\n\nconst AbortController = require('native-abort-controller');\n\nconst anySignal = require('any-signal');\n\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise;\n  }\n\n  const start = Date.now();\n\n  const timedOut = () => {\n    const time = Date.now() - start;\n    return time >= ms;\n  };\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError());\n        abortController.abort();\n      }\n    }, ms);\n\n    const after = next => {\n      return res => {\n        clearTimeout(timeoutID);\n\n        if (timedOut()) {\n          reject(new TimeoutError());\n          return;\n        }\n\n        next(res);\n      };\n    };\n\n    promise.then(after(resolve), after(reject));\n  });\n};\n\nconst defaults = {\n  headers: {},\n  throwHttpErrors: true,\n  credentials: 'same-origin',\n  transformSearchParams: p => p\n};\n/**\n * @typedef {Object} APIOptions - creates a new type named 'SpecialType'\n * @property {any} [body] - Request body\n * @property {Object} [json] - JSON shortcut\n * @property {string} [method] - GET, POST, PUT, DELETE, etc.\n * @property {string} [base] - The base URL to use in case url is a relative URL\n * @property {Headers|Record<string, string>} [headers] - Request header.\n * @property {number} [timeout] - Amount of time until request should timeout in ms.\n * @property {AbortSignal} [signal] - Signal to abort the request.\n * @property {URLSearchParams|Object} [searchParams] - URL search param.\n * @property {string} [credentials]\n * @property {boolean} [throwHttpErrors]\n * @property {function(URLSearchParams): URLSearchParams } [transformSearchParams]\n * @property {function(any): any} [transform] - When iterating the response body, transform each chunk with this function.\n * @property {function(Response): Promise<void>} [handleError] - Handle errors\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onUploadProgress] - Can be passed to track upload progress.\n * Note that if this option in passed underlying request will be performed using `XMLHttpRequest` and response will not be streamed.\n */\n\nclass HTTP {\n  /**\n   *\n   * @param {APIOptions} options\n   */\n  constructor(options = {}) {\n    /** @type {APIOptions} */\n    this.opts = merge(defaults, options);\n  }\n  /**\n   * Fetch\n   *\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n\n\n  async fetch(resource, options = {}) {\n    /** @type {APIOptions} */\n    const opts = merge(this.opts, options);\n    opts.headers = new Headers(opts.headers); // validate resource type\n\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request');\n    } // validate resource format and normalize with prefixUrl\n\n\n    if (opts.base && typeof opts.base === 'string' && typeof resource === 'string') {\n      if (resource.startsWith('/')) {\n        throw new Error('`resource` must not begin with a slash when using `base`');\n      }\n\n      if (!opts.base.endsWith('/')) {\n        opts.base += '/';\n      }\n\n      resource = opts.base + resource;\n    } // TODO: try to remove the logic above or fix URL instance input without trailing '/'\n\n\n    const url = new URL(resource, opts.base);\n\n    if (opts.searchParams) {\n      url.search = opts.transformSearchParams(new URLSearchParams(opts.searchParams));\n    }\n\n    if (opts.json !== undefined) {\n      opts.body = JSON.stringify(opts.json);\n      opts.headers.set('content-type', 'application/json');\n    }\n\n    const abortController = new AbortController();\n    const signal = anySignal([abortController.signal, opts.signal]);\n    const response = await timeout(fetch(url.toString(), { ...opts,\n      signal,\n      timeout: undefined\n    }), opts.timeout, abortController);\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response);\n      }\n\n      throw new HTTPError(response);\n    }\n\n    response.iterator = function () {\n      const it = streamToAsyncIterator(response.body);\n\n      if (!isAsyncIterator(it)) {\n        throw new Error('Can\\'t convert fetch body into a Async Iterator:');\n      }\n\n      return it;\n    };\n\n    response.ndjson = async function* () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk);\n        } else {\n          yield chunk;\n        }\n      }\n    };\n\n    return response;\n  }\n  /**\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n\n\n  post(resource, options = {}) {\n    return this.fetch(resource, { ...options,\n      method: 'POST'\n    });\n  }\n  /**\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n\n\n  get(resource, options = {}) {\n    return this.fetch(resource, { ...options,\n      method: 'GET'\n    });\n  }\n  /**\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n\n\n  put(resource, options = {}) {\n    return this.fetch(resource, { ...options,\n      method: 'PUT'\n    });\n  }\n  /**\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n\n\n  delete(resource, options = {}) {\n    return this.fetch(resource, { ...options,\n      method: 'DELETE'\n    });\n  }\n  /**\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n\n\n  options(resource, options = {}) {\n    return this.fetch(resource, { ...options,\n      method: 'OPTIONS'\n    });\n  }\n\n}\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncGenerator<Uint8Array, void, any>} source\n * @returns {AsyncGenerator<Object, void, any>}\n */\n\n\nconst ndjson = async function* (source) {\n  const decoder = new TextDecoder();\n  let buf = '';\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, {\n      stream: true\n    });\n    const lines = buf.split(/\\r?\\n/);\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim();\n\n      if (l.length > 0) {\n        yield JSON.parse(l);\n      }\n    }\n\n    buf = lines[lines.length - 1];\n  }\n\n  buf += decoder.decode();\n  buf = buf.trim();\n\n  if (buf.length !== 0) {\n    yield JSON.parse(buf);\n  }\n};\n\nconst streamToAsyncIterator = function (source) {\n  if (isAsyncIterator(source)) {\n    // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n    if (Object.prototype.hasOwnProperty.call(source, 'readable') && Object.prototype.hasOwnProperty.call(source, 'writable')) {\n      const iter = source[Symbol.asyncIterator]();\n      const wrapper = {\n        next: iter.next.bind(iter),\n        return: () => {\n          source.destroy();\n          return iter.return();\n        },\n        [Symbol.asyncIterator]: () => {\n          return wrapper;\n        }\n      };\n      return wrapper;\n    }\n\n    return source;\n  }\n\n  const reader = source.getReader();\n  return {\n    next() {\n      return reader.read();\n    },\n\n    return() {\n      reader.releaseLock();\n      return {};\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n\n  };\n};\n\nconst isAsyncIterator = obj => {\n  return typeof obj === 'object' && obj !== null && // typeof obj.next === 'function' &&\n  typeof obj[Symbol.asyncIterator] === 'function';\n};\n\nHTTP.HTTPError = HTTPError;\nHTTP.TimeoutError = TimeoutError;\nHTTP.streamToAsyncIterator = streamToAsyncIterator;\n/**\n * @param {string | URL | Request} resource\n * @param {APIOptions} options\n * @returns {Promise<Response>}\n */\n\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options);\n/**\n * @param {string | URL | Request} resource\n * @param {APIOptions} options\n * @returns {Promise<Response>}\n */\n\n\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options);\n/**\n * @param {string | URL | Request} resource\n * @param {APIOptions} options\n * @returns {Promise<Response>}\n */\n\n\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options);\n/**\n * @param {string | URL | Request} resource\n * @param {APIOptions} options\n * @returns {Promise<Response>}\n */\n\n\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options);\n/**\n * @param {string | URL | Request} resource\n * @param {APIOptions} options\n * @returns {Promise<Response>}\n */\n\n\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options);\n\nmodule.exports = HTTP;","map":{"version":3,"sources":["/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/node_modules/ipfs-utils/src/http.js"],"names":["fetch","Request","Headers","require","TimeoutError","HTTPError","merge","bind","ignoreUndefined","URL","URLSearchParams","TextDecoder","AbortController","anySignal","timeout","promise","ms","abortController","undefined","start","Date","now","timedOut","time","Promise","resolve","reject","timeoutID","setTimeout","abort","after","next","res","clearTimeout","then","defaults","headers","throwHttpErrors","credentials","transformSearchParams","p","HTTP","constructor","options","opts","resource","TypeError","base","startsWith","Error","endsWith","url","searchParams","search","json","body","JSON","stringify","set","signal","response","toString","ok","handleError","iterator","it","streamToAsyncIterator","isAsyncIterator","ndjson","chunk","transform","post","method","get","put","delete","source","decoder","buf","decode","stream","lines","split","i","length","l","trim","parse","Object","prototype","hasOwnProperty","call","iter","Symbol","asyncIterator","wrapper","return","destroy","reader","getReader","read","releaseLock","obj","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n'use strict'\n\nconst { fetch, Request, Headers } = require('./http/fetch')\nconst { TimeoutError, HTTPError } = require('./http/error')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\nconst { URL, URLSearchParams } = require('iso-url')\nconst TextDecoder = require('./text-decoder')\nconst AbortController = require('native-abort-controller')\nconst anySignal = require('any-signal')\n\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise\n  }\n\n  const start = Date.now()\n\n  const timedOut = () => {\n    const time = Date.now() - start\n\n    return time >= ms\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError())\n        abortController.abort()\n      }\n    }, ms)\n\n    const after = (next) => {\n      return (res) => {\n        clearTimeout(timeoutID)\n\n        if (timedOut()) {\n          reject(new TimeoutError())\n          return\n        }\n\n        next(res)\n      }\n    }\n\n    promise\n      .then(after(resolve), after(reject))\n  })\n}\n\nconst defaults = {\n  headers: {},\n  throwHttpErrors: true,\n  credentials: 'same-origin',\n  transformSearchParams: p => p\n}\n\n/**\n * @typedef {Object} APIOptions - creates a new type named 'SpecialType'\n * @property {any} [body] - Request body\n * @property {Object} [json] - JSON shortcut\n * @property {string} [method] - GET, POST, PUT, DELETE, etc.\n * @property {string} [base] - The base URL to use in case url is a relative URL\n * @property {Headers|Record<string, string>} [headers] - Request header.\n * @property {number} [timeout] - Amount of time until request should timeout in ms.\n * @property {AbortSignal} [signal] - Signal to abort the request.\n * @property {URLSearchParams|Object} [searchParams] - URL search param.\n * @property {string} [credentials]\n * @property {boolean} [throwHttpErrors]\n * @property {function(URLSearchParams): URLSearchParams } [transformSearchParams]\n * @property {function(any): any} [transform] - When iterating the response body, transform each chunk with this function.\n * @property {function(Response): Promise<void>} [handleError] - Handle errors\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onUploadProgress] - Can be passed to track upload progress.\n * Note that if this option in passed underlying request will be performed using `XMLHttpRequest` and response will not be streamed.\n */\n\nclass HTTP {\n  /**\n   *\n   * @param {APIOptions} options\n   */\n  constructor (options = {}) {\n    /** @type {APIOptions} */\n    this.opts = merge(defaults, options)\n  }\n\n  /**\n   * Fetch\n   *\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n  async fetch (resource, options = {}) {\n    /** @type {APIOptions} */\n    const opts = merge(this.opts, options)\n    opts.headers = new Headers(opts.headers)\n\n    // validate resource type\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request')\n    }\n\n    // validate resource format and normalize with prefixUrl\n    if (opts.base && typeof opts.base === 'string' && typeof resource === 'string') {\n      if (resource.startsWith('/')) {\n        throw new Error('`resource` must not begin with a slash when using `base`')\n      }\n\n      if (!opts.base.endsWith('/')) {\n        opts.base += '/'\n      }\n\n      resource = opts.base + resource\n    }\n\n    // TODO: try to remove the logic above or fix URL instance input without trailing '/'\n    const url = new URL(resource, opts.base)\n\n    if (opts.searchParams) {\n      url.search = opts.transformSearchParams(new URLSearchParams(opts.searchParams))\n    }\n\n    if (opts.json !== undefined) {\n      opts.body = JSON.stringify(opts.json)\n      opts.headers.set('content-type', 'application/json')\n    }\n\n    const abortController = new AbortController()\n    const signal = anySignal([abortController.signal, opts.signal])\n\n    const response = await timeout(fetch(url.toString(), {\n      ...opts,\n      signal,\n      timeout: undefined\n    }), opts.timeout, abortController)\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response)\n      }\n      throw new HTTPError(response)\n    }\n\n    response.iterator = function () {\n      const it = streamToAsyncIterator(response.body)\n\n      if (!isAsyncIterator(it)) {\n        throw new Error('Can\\'t convert fetch body into a Async Iterator:')\n      }\n\n      return it\n    }\n\n    response.ndjson = async function * () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk)\n        } else {\n          yield chunk\n        }\n      }\n    }\n\n    return response\n  }\n\n  /**\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n  post (resource, options = {}) {\n    return this.fetch(resource, {\n      ...options,\n      method: 'POST'\n    })\n  }\n\n  /**\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n  get (resource, options = {}) {\n    return this.fetch(resource, {\n      ...options,\n      method: 'GET'\n    })\n  }\n\n  /**\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n  put (resource, options = {}) {\n    return this.fetch(resource, {\n      ...options,\n      method: 'PUT'\n    })\n  }\n\n  /**\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n  delete (resource, options = {}) {\n    return this.fetch(resource, {\n      ...options,\n      method: 'DELETE'\n    })\n  }\n\n  /**\n   * @param {string | URL | Request} resource\n   * @param {APIOptions} options\n   * @returns {Promise<Response>}\n   */\n  options (resource, options = {}) {\n    return this.fetch(resource, {\n      ...options,\n      method: 'OPTIONS'\n    })\n  }\n}\n\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncGenerator<Uint8Array, void, any>} source\n * @returns {AsyncGenerator<Object, void, any>}\n */\nconst ndjson = async function * (source) {\n  const decoder = new TextDecoder()\n  let buf = ''\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, { stream: true })\n    const lines = buf.split(/\\r?\\n/)\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim()\n      if (l.length > 0) {\n        yield JSON.parse(l)\n      }\n    }\n    buf = lines[lines.length - 1]\n  }\n  buf += decoder.decode()\n  buf = buf.trim()\n  if (buf.length !== 0) {\n    yield JSON.parse(buf)\n  }\n}\n\nconst streamToAsyncIterator = function (source) {\n  if (isAsyncIterator(source)) {\n    // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n    if (Object.prototype.hasOwnProperty.call(source, 'readable') && Object.prototype.hasOwnProperty.call(source, 'writable')) {\n      const iter = source[Symbol.asyncIterator]()\n\n      const wrapper = {\n        next: iter.next.bind(iter),\n        return: () => {\n          source.destroy()\n\n          return iter.return()\n        },\n        [Symbol.asyncIterator]: () => {\n          return wrapper\n        }\n      }\n\n      return wrapper\n    }\n\n    return source\n  }\n\n  const reader = source.getReader()\n\n  return {\n    next () {\n      return reader.read()\n    },\n    return () {\n      reader.releaseLock()\n      return {}\n    },\n    [Symbol.asyncIterator] () {\n      return this\n    }\n  }\n}\n\nconst isAsyncIterator = (obj) => {\n  return typeof obj === 'object' &&\n  obj !== null &&\n  // typeof obj.next === 'function' &&\n  typeof obj[Symbol.asyncIterator] === 'function'\n}\n\nHTTP.HTTPError = HTTPError\nHTTP.TimeoutError = TimeoutError\nHTTP.streamToAsyncIterator = streamToAsyncIterator\n\n/**\n * @param {string | URL | Request} resource\n * @param {APIOptions} options\n * @returns {Promise<Response>}\n */\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options)\n\n/**\n * @param {string | URL | Request} resource\n * @param {APIOptions} options\n * @returns {Promise<Response>}\n */\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options)\n\n/**\n * @param {string | URL | Request} resource\n * @param {APIOptions} options\n * @returns {Promise<Response>}\n */\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options)\n\n/**\n * @param {string | URL | Request} resource\n * @param {APIOptions} options\n * @returns {Promise<Response>}\n */\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options)\n\n/**\n * @param {string | URL | Request} resource\n * @param {APIOptions} options\n * @returns {Promise<Response>}\n */\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options)\n\nmodule.exports = HTTP\n"]},"metadata":{},"sourceType":"script"}