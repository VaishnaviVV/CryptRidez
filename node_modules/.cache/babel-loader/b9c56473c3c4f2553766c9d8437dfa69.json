{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport * as util from \"ethereumjs-util\";\nimport '../App.css';\nimport user from '../abis/user.json';\nimport AuthNavBar from '../Components/AuthNavBar';\nimport Main from '../Components/Main';\nimport DriverID from '../Components/DriverID';\nimport User from '../Components/User'; //Declare IPFS\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nconst crypto = require('crypto');\n\nclass Dashboard extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3.providers.HttpProvider(\"127.0.0.1:9545\");\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3; // Load account\n\n    const accounts = await web3.eth.getAccounts(); // var signing_address = await web3.eth.personal.ecRecover(hash, signature)\n    // console.log(signing_address)\n    // this.setState({ account: accounts[0] })\n    // var unitbal = await web3.eth.getBalance(accounts[0])\n    // vaar balanceacc = await web3.utils.fromWei(unitbal,'ether')\n\n    this.setState({\n      balance: balanceacc\n    });\n    const networkId = await web3.eth.net.getId();\n    const networkData = user.networks[networkId]; // console.log(networkData);\n\n    let reqCounts = 0,\n        imgCounts = 0,\n        rideCounts = 0;\n\n    if (networkData) {\n      const user1 = new web3.eth.Contract(user.abi, networkData.address);\n      console.log(user1);\n      this.setState({\n        user1\n      });\n      const reqCountsPromise = user1.methods.reqCount().call();\n      reqCountsPromise.then(reqCount => {\n        reqCounts = reqCount;\n      });\n      this.setState({\n        rideCounts\n      });\n      const imgCountsPromise = user1.methods.imgCount().call();\n      imgCountsPromise.then(imgCount => {\n        imgCounts = imgCount;\n      });\n      this.setState({\n        imgCounts\n      });\n      const rideCountsPromise = user1.methods.rideCount().call();\n      rideCountsPromise.then(rideCount => {\n        rideCounts = rideCount;\n      });\n      this.setState({\n        reqCounts\n      });\n\n      for (var i = 0; i <= reqCounts; i++) {\n        const users_var = await user1.methods.users(i).call();\n        this.setState({\n          users: [...this.state.users, users_var]\n        });\n      } //Load images\n\n\n      for (var j = 0; j <= imgCounts; j++) {\n        const img_var = await user1.methods.driver(j).call();\n        this.setState({\n          driver: [...this.state.driver, img_var]\n        });\n      }\n      /** */\n\n\n      for (var k = 0; k <= rideCounts; k++) {\n        const ride_var = await user1.methods.ride(k).call();\n        console.log(ride_var);\n        this.setState({\n          ride: [...this.state.ride, ride_var]\n        });\n      } //var message = \"Some string\"\n\n\n      var message = crypto.randomBytes(20).toString('hex');\n      var hash = web3.utils.sha3(message);\n      const data = await web3.eth.personal.sign(hash, accounts[0]);\n      console.log(data);\n      this.setState({\n        signature: data\n      });\n      this.setState({\n        message: message\n      });\n      var nonce = \"\\0x19Ethereum Signed Message:\\n\" + this.state.signature.length + this.state.signature;\n      nonce = util.keccak(Buffer.from(nonce, \"utf-8\"));\n      const {\n        v,\n        r,\n        s\n      } = util.fromRpcSig(this.state.signature);\n      const pubKey = util.ecrecover(util.toBuffer(nonce), v, r, s);\n      const addrBuf = util.pubToAddress(pubKey);\n      const addr = util.bufferToHex(addrBuf);\n      console.log(addr);\n      var message_hash = web3.utils.sha3(this.state.message);\n      var signing_address = await web3.eth.personal.ecRecover(message_hash, this.state.signature);\n      this.setState({\n        signing_address: signing_address\n      });\n      this.setState({\n        account: signing_address\n      });\n      var unitbal = await web3.eth.getBalance(this.state.account);\n      console.log(unitbal);\n      var balanceacc = await web3.utils.fromWei(unitbal, 'ether');\n      this.setState({\n        balance: balanceacc\n      });\n    } else {\n      window.alert('User contract not deployed to detected network.');\n    }\n  }\n\n  uploadImage(drivername) {\n    console.log(\"submitting file to ipfs...\");\n    ipfs.default.files.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result[0].hash);\n      console.log('Ipfs result', this.result[0].hash);\n\n      if (error) {\n        console.error(error);\n        return;\n      }\n\n      console.log('Ipfs result', this.result[0].hash);\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.uploadImg(result[0].hash, drivername, false).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    });\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.rideReq = (source, destination, date, time) => {\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.rideReq(source, destination, date, time).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadRide = (source, destination, date, time, rider, amount) => {\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.uploadRide(source, destination, date, time, rider, amount).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadImaging = (drivername, hash, verified) => {\n      this.state.user1.methods.uploadImage(hash, drivername, verified).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.verifyDriver = (id, hashs, name, author) => {\n      this.state.user1.methods.verifyDriver(id, hashs, name, author).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.tipImageOwner = (id, tipAmount) => {\n      this.setState({\n        loading: true\n      });\n      this.setState({\n        loading: false\n      });\n      this.state.cryptridez.methods.tipImageOwner(id).send({\n        from: this.state.account,\n        value: tipAmount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.rideAmount = (id, amount) => {\n      this.state.user1.methods.ridePayment(id).send({\n        from: this.state.account,\n        value: amount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.state = {\n      balance: '',\n      account: '',\n      user1: null,\n      users: [],\n      driver: [],\n      ride: [],\n      signature: '',\n      message: '',\n      signing_address: '',\n      loading: true,\n      email: '',\n      buffer: ''\n    };\n  }\n\n  render() {\n    let body;\n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236'.toLowerCase()];\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9'.toLowerCase()];\n    var email = sessionStorage.getItem('login');\n    var domain = email.substring(email.lastIndexOf(\"@\") + 1);\n    console.log(domain.length);\n    console.log(this.state.buffer);\n    console.log(authorizedAccounts.includes(this.state.signing_address) && domain === \"drivercryptridez.com\");\n\n    if (authorizedAccounts.includes(this.state.signing_address) && domain === \"drivercryptridez.com\") {\n      body = /*#__PURE__*/_jsxDEV(Main, {\n        account: this.state.signing_address,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadRide: this.uploadRide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this);\n    } else if (authorizedAccounts2.includes(this.state.signing_address) && domain === \"cryptridez.com\") {\n      body = /*#__PURE__*/_jsxDEV(DriverID, {\n        account: this.state.signing_address,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadImaging: this.uploadImaging,\n        verifyDriver: this.verifyDriver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this);\n    } else {\n      body = /*#__PURE__*/_jsxDEV(User, {\n        account: this.state.signing_address,\n        rideReq: this.rideReq,\n        users: this.state.users,\n        uploadRide: this.uploadRide,\n        ride: this.state.ride,\n        rideAmount: this.rideAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AuthNavBar, {\n        account: this.state.signing_address,\n        balance: this.state.balance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this), body]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js"],"names":["React","Component","Web3","Identicon","util","user","AuthNavBar","Main","DriverID","User","ipfsClient","require","ipfs","host","port","protocol","crypto","Dashboard","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","providers","HttpProvider","alert","accounts","eth","getAccounts","setState","balance","balanceacc","networkId","net","getId","networkData","networks","reqCounts","imgCounts","rideCounts","user1","Contract","abi","address","console","log","reqCountsPromise","methods","reqCount","call","then","imgCountsPromise","imgCount","rideCountsPromise","rideCount","i","users_var","users","state","j","img_var","driver","k","ride_var","ride","message","randomBytes","toString","hash","utils","sha3","data","personal","sign","signature","nonce","length","keccak","Buffer","from","v","r","s","fromRpcSig","pubKey","ecrecover","toBuffer","addrBuf","pubToAddress","addr","bufferToHex","message_hash","signing_address","ecRecover","account","unitbal","getBalance","fromWei","uploadImage","drivername","default","files","add","buffer","error","result","loading","uploadImg","send","on","constructor","props","captureFile","event","preventDefault","file","target","reader","FileReader","readAsArrayBuffer","onloadend","rideReq","source","destination","date","time","uploadRide","rider","amount","uploadImaging","verified","verifyDriver","id","hashs","name","author","tipImageOwner","tipAmount","cryptridez","value","rideAmount","ridePayment","email","render","body","authorizedAccounts","toLowerCase","authorizedAccounts2","sessionStorage","getItem","domain","substring","lastIndexOf","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport * as util from \"ethereumjs-util\";\nimport '../App.css';\nimport user from '../abis/user.json'\nimport AuthNavBar from '../Components/AuthNavBar'\nimport Main from '../Components/Main'\nimport DriverID from '../Components/DriverID'\n\nimport User from '../Components/User'\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https'}) // leaving out the arguments will default to these values\nconst crypto=require('crypto')\n\nclass Dashboard extends Component {\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3.providers.HttpProvider(\"127.0.0.1:9545\")\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    \n    // var signing_address = await web3.eth.personal.ecRecover(hash, signature)\n\n    // console.log(signing_address)\n    // this.setState({ account: accounts[0] })\n    // var unitbal = await web3.eth.getBalance(accounts[0])\n    // vaar balanceacc = await web3.utils.fromWei(unitbal,'ether')\n\n    this.setState({balance: balanceacc})\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = user.networks[networkId]\n    // console.log(networkData);\n    let reqCounts=0,imgCounts=0,rideCounts=0;\n\n    if (networkData) {\n      const user1 = new web3.eth.Contract(user.abi, networkData.address)\n      console.log(user1); \n\n      this.setState({ user1 })\n\n\n      const reqCountsPromise =  user1.methods.reqCount().call()\n\n      \n      reqCountsPromise.then((reqCount) => {\n        reqCounts=reqCount\n      })\n\n      this.setState({ rideCounts })\n\n      \n      const imgCountsPromise =  user1.methods.imgCount().call()\n\n      \n      imgCountsPromise.then((imgCount) => {\n        imgCounts=imgCount\n      }\n\n      )\n\n      this.setState({ imgCounts })\n\n     \n      const rideCountsPromise =  user1.methods.rideCount().call()\n\n      rideCountsPromise.then((rideCount) => {\n        rideCounts=rideCount\n      })\n\n\n      this.setState({ reqCounts })\n     \n      for (var i = 0; i <= reqCounts; i++) {\n        const users_var = await user1.methods.users(i).call()\n\n        this.setState({\n          users: [...this.state.users,users_var]\n        })\n      }\n\n      //Load images\n      \n      for (var j=0; j<=imgCounts; j++){\n        const img_var = await user1.methods.driver(j).call()\n\n        this.setState({\n          driver: [...this.state.driver,img_var]\n        })\n      }\n     /** */\n\n     for (var k=0; k<=rideCounts; k++){\n      const ride_var = await user1.methods.ride(k).call()\n      console.log(ride_var);\n\n      this.setState({\n        ride: [...this.state.ride,ride_var]\n      })\n\n      \n    }\n\n\n    //var message = \"Some string\"\n    var message = crypto.randomBytes(20).toString('hex');\n    var hash = web3.utils.sha3(message)\n    const data=await web3.eth.personal.sign(hash, accounts[0])\n    console.log(data)\n    this.setState({\n      signature: data\n    })\n      this.setState({\n        message: message\n      })\n    var nonce = \"\\0x19Ethereum Signed Message:\\n\" + this.state.signature.length + this.state.signature\n    nonce = util.keccak(Buffer.from(nonce, \"utf-8\"))\n    const { v, r, s } = util.fromRpcSig(this.state.signature)\n    const pubKey = util.ecrecover(util.toBuffer(nonce), v, r, s)\n    const addrBuf = util.pubToAddress(pubKey)\n    const addr = util.bufferToHex(addrBuf)\n    console.log(addr)\n\n    var message_hash=web3.utils.sha3(this.state.message)\n\n    var signing_address = await web3.eth.personal.ecRecover(message_hash,this.state.signature)\n\n    this.setState({\n      signing_address: signing_address\n    })\n   \n    this.setState({ account: signing_address })\n    var unitbal = await web3.eth.getBalance(this.state.account)\n    console.log(unitbal)\n    var balanceacc = await web3.utils.fromWei(unitbal,'ether')\n\n    this.setState({balance: balanceacc})\n\n\n    } else {\n      window.alert('User contract not deployed to detected network.')\n    }\n\n  }\n\n  \n  captureFile = event => {\n\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  \n\n  rideReq = (source,destination,date,time) => {\n    this.setState({loading:true })\n      this.state.user1.methods.rideReq(source,destination,date,time).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  uploadRide = (source,destination,date,time,rider,amount) => {\n    this.setState({loading:true })\n      this.state.user1.methods.uploadRide(source,destination,date,time,rider,amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  \n\n  uploadImaging = (drivername,hash,verified) =>\n  {\n    this.state.user1.methods.uploadImage(hash,drivername,verified).send({from: this.state.account}).on('transactionHash',(hash) => {\n      this.setState({loading:false})\n    })\n\n  }\n\n  uploadImage(drivername) {\n    console.log(\"submitting file to ipfs...\")\n\n    ipfs.default.files.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result[0].hash)\n      console.log('Ipfs result', this.result[0].hash)\n      if (error) {\n        console.error(error)\n        return\n      }\n    console.log('Ipfs result', this.result[0].hash)\n\n    this.setState({loading:true})\n      this.state.user1.methods.uploadImg(result[0].hash,drivername,false).send({from: this.state.account}).on('transactionHash',(hash) => {\n        this.setState({loading:false})\n      })\n    })\n  }\n\n  verifyDriver = (id,hashs,name,author) => {\n\n  this.state.user1.methods.verifyDriver(id,hashs,name,author).send({from: this.state.account}).on('transactionHash',(hash) => {\n    this.setState({loading:false})\n  })\n  }\n\n  tipImageOwner = (id, tipAmount) =>{\n    this.setState({ loading: true })\n    this.setState({ loading: false })\n    this.state.cryptridez.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  rideAmount = (id,amount) =>{\n    this.state.user1.methods.ridePayment(id).send({ from: this.state.account, value: amount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      balance:'',\n      account: '',\n      user1: null,\n      users:[],\n      driver:[],\n      ride:[],\n      signature:'',\n      message:'',\n      signing_address:'',\n      loading: true,\n      email:'',\n      buffer:''\n    }\n   \n  }\n  \n\n  render() {\n\n    let body\n    \n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236'.toLowerCase()]\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9'.toLowerCase()]\n\n    var email=sessionStorage.getItem('login')\n    var domain = email.substring(email.lastIndexOf(\"@\")+1);\n    console.log(domain.length)\n    console.log(this.state.buffer)\n    console.log(authorizedAccounts.includes(this.state.signing_address) && domain===\"drivercryptridez.com\")\n        if(authorizedAccounts.includes(this.state.signing_address) && domain===\"drivercryptridez.com\"){\n          \n          body = \n          <Main\n          account={this.state.signing_address}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadRide = {this.uploadRide}\n        />\n        }\n        else if(authorizedAccounts2.includes(this.state.signing_address) && domain===\"cryptridez.com\"){\n          body = \n          <DriverID\n          account={this.state.signing_address}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadImaging = {this.uploadImaging}\n          verifyDriver = {this.verifyDriver}\n        />\n\n        }\n        else{\n          body = \n          <User\n          account = {this.state.signing_address}\n          rideReq = {this.rideReq} \n          users={this.state.users}\n          uploadRide = {this.uploadRide}\n          ride = {this.state.ride}\n          rideAmount = {this.rideAmount}\n          />\n                  }\n    \n    return (\n      <div>\n        <AuthNavBar account={this.state.signing_address}\n        balance= {this.state.balance} />\n        { body }\n\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}