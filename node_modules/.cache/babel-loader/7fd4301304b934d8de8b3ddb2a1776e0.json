{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport * as util from \"ethereumjs-util\";\nimport '../App.css';\nimport user from '../abis/user.json';\nimport AuthNavBar from '../Components/AuthNavBar';\nimport Main from '../Components/Main';\nimport DriverID from '../Components/DriverID';\nimport User from '../Components/User'; //Declare IPFS\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  apiPath: '/ipfs/api/v0'\n}); // leaving out the arguments will default to these values\n\nclass Dashboard extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3.providers.HttpProvider(\"127.0.0.1:9545\");\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3; // Load account\n\n    const accounts = await web3.eth.getAccounts(); // var signing_address = await web3.eth.personal.ecRecover(hash, signature)\n    // console.log(signing_address)\n\n    this.setState({\n      account: accounts[0]\n    });\n    const unitbal = await web3.eth.getBalance(accounts[0]);\n    const balanceacc = await web3.utils.fromWei(unitbal, 'ether');\n    this.setState({\n      balance: balanceacc\n    });\n    const networkId = await web3.eth.net.getId();\n    const networkData = user.networks[networkId]; // console.log(networkData);\n\n    let reqCounts = 0,\n        imgCounts = 0,\n        rideCounts = 0;\n\n    if (networkData) {\n      const user1 = new web3.eth.Contract(user.abi, networkData.address);\n      console.log(user1);\n      this.setState({\n        user1\n      });\n      const reqCountsPromise = user1.methods.reqCount().call();\n      reqCountsPromise.then(reqCount => {\n        reqCounts = reqCount;\n      });\n      this.setState({\n        rideCounts\n      });\n      const imgCountsPromise = user1.methods.imgCount().call();\n      imgCountsPromise.then(imgCount => {\n        imgCounts = imgCount;\n      });\n      this.setState({\n        imgCounts\n      });\n      const rideCountsPromise = user1.methods.rideCount().call();\n      rideCountsPromise.then(rideCount => {\n        rideCounts = rideCount;\n      });\n      this.setState({\n        reqCounts\n      });\n\n      for (var i = 0; i <= reqCounts; i++) {\n        const users_var = await user1.methods.users(i).call();\n        this.setState({\n          users: [...this.state.users, users_var]\n        });\n      } //Load images\n\n\n      for (var j = 0; j <= imgCounts; j++) {\n        const img_var = await user1.methods.driver(j).call();\n        this.setState({\n          driver: [...this.state.driver, img_var]\n        });\n      }\n      /** */\n\n\n      for (var k = 0; k <= rideCounts; k++) {\n        const ride_var = await user1.methods.ride(k).call();\n        console.log(ride_var);\n        this.setState({\n          ride: [...this.state.ride, ride_var]\n        });\n      }\n\n      var message = \"Some string\";\n      var hash = web3.utils.sha3(message);\n      const accounts = await web3.eth.getAccounts();\n      const data = await web3.eth.personal.sign(hash, accounts[0]);\n      console.log(data);\n      this.setState({\n        signature: data\n      });\n      this.setState({\n        message: message\n      });\n      var nonce = \"\\0x19Ethereum Signed Message:\\n\" + this.state.signature.length + this.state.signature;\n      nonce = util.keccak(Buffer.from(nonce, \"utf-8\"));\n      const {\n        v,\n        r,\n        s\n      } = util.fromRpcSig(this.state.signature);\n      const pubKey = util.ecrecover(util.toBuffer(nonce), v, r, s);\n      const addrBuf = util.pubToAddress(pubKey);\n      const addr = util.bufferToHex(addrBuf);\n      console.log(addr);\n      var message_hash = web3.utils.sha3(this.state.message);\n      var signing_address = await web3.eth.personal.ecRecover(message_hash, this.state.signature);\n      this.setState({\n        signing_address: signing_address\n      });\n    } else {\n      window.alert('User contract not deployed to detected network.');\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.rideReq = (source, destination, date, time) => {\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.rideReq(source, destination, date, time).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadRide = (source, destination, date, time, rider, amount) => {\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.uploadRide(source, destination, date, time, rider, amount).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadImaging = (drivername, hash, verified) => {\n      this.state.user1.methods.uploadImage(hash, drivername, verified).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadImage = drivername => {\n      console.log(\"submitting file to ipfs...\");\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('Ipfs result', result[0].hash);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        console.log('Ipfs result', this.result[0].hash);\n        this.setState({\n          loading: true\n        });\n        this.state.user1.methods.uploadImg(result[0].hash, drivername, false).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.verifyDriver = (id, hashs, name, author) => {\n      this.state.user1.methods.verifyDriver(id, hashs, name, author).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.tipImageOwner = (id, tipAmount) => {\n      this.setState({\n        loading: true\n      });\n      this.setState({\n        loading: false\n      });\n      this.state.cryptridez.methods.tipImageOwner(id).send({\n        from: this.state.account,\n        value: tipAmount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.rideAmount = (id, amount) => {\n      this.state.user1.methods.ridePayment(id).send({\n        from: this.state.account,\n        value: amount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.state = {\n      balance: '',\n      account: '',\n      user1: null,\n      users: [],\n      driver: [],\n      ride: [],\n      signature: '',\n      message: '',\n      signing_address: '',\n      loading: true,\n      email: ''\n    };\n  }\n\n  render() {\n    let body;\n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236'.toLowerCase()];\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9'.toLowerCase()];\n    var email = sessionStorage.getItem('login');\n    var domain = email.substring(email.lastIndexOf(\"@\") + 1);\n    console.log(domain.length);\n    console.log(this.state.signing_address);\n    console.log(authorizedAccounts.includes(this.state.signing_address) && domain === \"drivercryptridez.com\");\n\n    if (authorizedAccounts.includes(this.state.signing_address) && domain === \"drivercryptridez.com\") {\n      body = /*#__PURE__*/_jsxDEV(Main, {\n        account: this.state.signing_address,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadRide: this.uploadRide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this);\n    } else if (authorizedAccounts2.includes(this.state.signing_address) && domain === \"ridercryptridez.com\") {\n      body = /*#__PURE__*/_jsxDEV(DriverID, {\n        account: this.state.signing_address,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadImaging: this.uploadImaging,\n        verifyDriver: this.verifyDriver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this);\n    } else {\n      body = /*#__PURE__*/_jsxDEV(User, {\n        account: this.state.signing_address,\n        rideReq: this.rideReq,\n        users: this.state.users,\n        uploadRide: this.uploadRide,\n        ride: this.state.ride,\n        rideAmount: this.rideAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AuthNavBar, {\n        account: this.state.signing_address,\n        balance: this.state.balance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), body]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js"],"names":["React","Component","Web3","Identicon","util","user","AuthNavBar","Main","DriverID","User","ipfsClient","require","ipfs","host","port","protocol","apiPath","Dashboard","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","providers","HttpProvider","alert","accounts","eth","getAccounts","setState","account","unitbal","getBalance","balanceacc","utils","fromWei","balance","networkId","net","getId","networkData","networks","reqCounts","imgCounts","rideCounts","user1","Contract","abi","address","console","log","reqCountsPromise","methods","reqCount","call","then","imgCountsPromise","imgCount","rideCountsPromise","rideCount","i","users_var","users","state","j","img_var","driver","k","ride_var","ride","message","hash","sha3","data","personal","sign","signature","nonce","length","keccak","Buffer","from","v","r","s","fromRpcSig","pubKey","ecrecover","toBuffer","addrBuf","pubToAddress","addr","bufferToHex","message_hash","signing_address","ecRecover","constructor","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","result","rideReq","source","destination","date","time","loading","send","on","uploadRide","rider","amount","uploadImaging","drivername","verified","uploadImage","add","error","uploadImg","verifyDriver","id","hashs","name","author","tipImageOwner","tipAmount","cryptridez","value","rideAmount","ridePayment","email","render","body","authorizedAccounts","toLowerCase","authorizedAccounts2","sessionStorage","getItem","domain","substring","lastIndexOf","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport * as util from \"ethereumjs-util\";\nimport '../App.css';\nimport user from '../abis/user.json'\nimport AuthNavBar from '../Components/AuthNavBar'\nimport Main from '../Components/Main'\nimport DriverID from '../Components/DriverID'\n\nimport User from '../Components/User'\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https',apiPath: '/ipfs/api/v0' }) // leaving out the arguments will default to these values\n\n\nclass Dashboard extends Component {\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3.providers.HttpProvider(\"127.0.0.1:9545\")\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    \n    // var signing_address = await web3.eth.personal.ecRecover(hash, signature)\n\n    // console.log(signing_address)\n    this.setState({ account: accounts[0] })\n    const unitbal = await web3.eth.getBalance(accounts[0])\n    const balanceacc = await web3.utils.fromWei(unitbal,'ether')\n\n    this.setState({balance: balanceacc})\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = user.networks[networkId]\n    // console.log(networkData);\n    let reqCounts=0,imgCounts=0,rideCounts=0;\n\n    if (networkData) {\n      const user1 = new web3.eth.Contract(user.abi, networkData.address)\n      console.log(user1); \n\n      this.setState({ user1 })\n\n\n      const reqCountsPromise =  user1.methods.reqCount().call()\n\n      \n      reqCountsPromise.then((reqCount) => {\n        reqCounts=reqCount\n      })\n\n      this.setState({ rideCounts })\n\n      \n      const imgCountsPromise =  user1.methods.imgCount().call()\n\n      \n      imgCountsPromise.then((imgCount) => {\n        imgCounts=imgCount\n      }\n\n      )\n\n      this.setState({ imgCounts })\n\n     \n      const rideCountsPromise =  user1.methods.rideCount().call()\n\n      rideCountsPromise.then((rideCount) => {\n        rideCounts=rideCount\n      })\n\n\n      this.setState({ reqCounts })\n     \n      for (var i = 0; i <= reqCounts; i++) {\n        const users_var = await user1.methods.users(i).call()\n\n        this.setState({\n          users: [...this.state.users,users_var]\n        })\n      }\n\n      //Load images\n      \n      for (var j=0; j<=imgCounts; j++){\n        const img_var = await user1.methods.driver(j).call()\n\n        this.setState({\n          driver: [...this.state.driver,img_var]\n        })\n      }\n     /** */\n\n     for (var k=0; k<=rideCounts; k++){\n      const ride_var = await user1.methods.ride(k).call()\n      console.log(ride_var);\n\n      this.setState({\n        ride: [...this.state.ride,ride_var]\n      })\n\n      \n    }\n\n    var message = \"Some string\"\n    var hash = web3.utils.sha3(message)\n    const accounts = await web3.eth.getAccounts()\n    const data=await web3.eth.personal.sign(hash, accounts[0])\n    console.log(data)\n    this.setState({\n      signature: data\n    })\n      this.setState({\n        message: message\n      })\n    var nonce = \"\\0x19Ethereum Signed Message:\\n\" + this.state.signature.length + this.state.signature\n    nonce = util.keccak(Buffer.from(nonce, \"utf-8\"))\n    const { v, r, s } = util.fromRpcSig(this.state.signature)\n    const pubKey = util.ecrecover(util.toBuffer(nonce), v, r, s)\n    const addrBuf = util.pubToAddress(pubKey)\n    const addr = util.bufferToHex(addrBuf)\n    console.log(addr)\n\n    var message_hash=web3.utils.sha3(this.state.message)\n\n    var signing_address = await web3.eth.personal.ecRecover(message_hash,this.state.signature)\n\n    this.setState({\n      signing_address: signing_address\n    })\n   \n    } else {\n      window.alert('User contract not deployed to detected network.')\n    }\n\n  }\n\n  \n  captureFile = event => {\n\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  \n\n  rideReq = (source,destination,date,time) => {\n    this.setState({loading:true })\n      this.state.user1.methods.rideReq(source,destination,date,time).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  uploadRide = (source,destination,date,time,rider,amount) => {\n    this.setState({loading:true })\n      this.state.user1.methods.uploadRide(source,destination,date,time,rider,amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  \n\n  uploadImaging = (drivername,hash,verified) =>\n  {\n    this.state.user1.methods.uploadImage(hash,drivername,verified).send({from: this.state.account}).on('transactionHash',(hash) => {\n      this.setState({loading:false})\n    })\n\n  }\n\n  uploadImage = drivername => {\n    console.log(\"submitting file to ipfs...\")\n\n     ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result[0].hash)\n      if (error) {\n        console.error(error)\n        return\n      }\n    console.log('Ipfs result', this.result[0].hash)\n\n    this.setState({loading:true})\n      this.state.user1.methods.uploadImg(result[0].hash,drivername,false).send({from: this.state.account}).on('transactionHash',(hash) => {\n        this.setState({loading:false})\n      })\n    })\n  }\n\n  verifyDriver = (id,hashs,name,author) => {\n\n  this.state.user1.methods.verifyDriver(id,hashs,name,author).send({from: this.state.account}).on('transactionHash',(hash) => {\n    this.setState({loading:false})\n  })\n  }\n\n  tipImageOwner = (id, tipAmount) =>{\n    this.setState({ loading: true })\n    this.setState({ loading: false })\n    this.state.cryptridez.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  rideAmount = (id,amount) =>{\n    this.state.user1.methods.ridePayment(id).send({ from: this.state.account, value: amount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      balance:'',\n      account: '',\n      user1: null,\n      users:[],\n      driver:[],\n      ride:[],\n      signature:'',\n      message:'',\n      signing_address:'',\n      loading: true,\n      email:''\n    }\n   \n  }\n  \n\n  render() {\n\n    let body\n    \n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236'.toLowerCase()]\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9'.toLowerCase()]\n\n    var email=sessionStorage.getItem('login')\n    var domain = email.substring(email.lastIndexOf(\"@\")+1);\n    console.log(domain.length)\n    console.log(this.state.signing_address)\n    console.log(authorizedAccounts.includes(this.state.signing_address) && domain===\"drivercryptridez.com\")\n        if(authorizedAccounts.includes(this.state.signing_address) && domain===\"drivercryptridez.com\"){\n          \n          body = \n          <Main\n          account={this.state.signing_address}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadRide = {this.uploadRide}\n        />\n        }\n        else if(authorizedAccounts2.includes(this.state.signing_address) && domain===\"ridercryptridez.com\"){\n          body = \n          <DriverID\n          account={this.state.signing_address}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadImaging = {this.uploadImaging}\n          verifyDriver = {this.verifyDriver}\n        />\n\n        }\n        else{\n          body = \n          <User\n          account = {this.state.signing_address}\n          rideReq = {this.rideReq} \n          users={this.state.users}\n          uploadRide = {this.uploadRide}\n          ride = {this.state.ride}\n          rideAmount = {this.rideAmount}\n          />\n                  }\n    \n    return (\n      <div>\n        <AuthNavBar account={this.state.signing_address}\n        balance= {this.state.balance} />\n        { body }\n\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}