{"ast":null,"code":"'use strict'; // Import browser version otherwise electron-renderer will end up with node\n// version and fail.\n\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser');\n\nconst modeToString = require('./mode-to-string');\n\nconst {\n  File,\n  FormData\n} = require('ipfs-utils/src/globalthis');\n\nasync function multipartRequest(source = '', abortController, headers = {}) {\n  const parts = [];\n  const formData = new FormData();\n  let index = 0;\n  let total = 0;\n\n  for await (const {\n    content,\n    path,\n    mode,\n    mtime\n  } of normaliseInput(source)) {\n    let fileSuffix = '';\n    const type = content ? 'file' : 'dir';\n\n    if (index > 0) {\n      fileSuffix = `-${index}`;\n    }\n\n    let fieldName = type + fileSuffix;\n    const qs = [];\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`);\n    }\n\n    if (mtime != null) {\n      const {\n        secs,\n        nsecs\n      } = mtime;\n      qs.push(`mtime=${secs}`);\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`);\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`;\n    }\n\n    if (content) {\n      formData.set(fieldName, content, encodeURIComponent(path));\n      const end = total + content.size;\n      parts.push({\n        name: path,\n        start: total,\n        end\n      });\n      total = end;\n    } else {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), {\n        type: 'application/x-directory'\n      }));\n    }\n\n    index++;\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  };\n}\n\nmodule.exports = multipartRequest;","map":{"version":3,"sources":["/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/node_modules/ipfs-http-client/src/lib/multipart-request.browser.js"],"names":["normaliseInput","require","modeToString","File","FormData","multipartRequest","source","abortController","headers","parts","formData","index","total","content","path","mode","mtime","fileSuffix","type","fieldName","qs","undefined","push","secs","nsecs","length","join","set","encodeURIComponent","end","size","name","start","body","module","exports"],"mappings":"AAAA,a,CAEA;AACA;;AACA,MAAMA,cAAc,GAAGC,OAAO,CAAC,yDAAD,CAA9B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,kBAAD,CAA5B;;AACA,MAAM;AAAEE,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAqBH,OAAO,CAAC,2BAAD,CAAlC;;AAEA,eAAeI,gBAAf,CAAiCC,MAAM,GAAG,EAA1C,EAA8CC,eAA9C,EAA+DC,OAAO,GAAG,EAAzE,EAA6E;AAC3E,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,QAAQ,GAAG,IAAIN,QAAJ,EAAjB;AACA,MAAIO,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,aAAW,MAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA;AAAvB,GAAjB,IAAmDhB,cAAc,CAACM,MAAD,CAAjE,EAA2E;AACzE,QAAIW,UAAU,GAAG,EAAjB;AACA,UAAMC,IAAI,GAAGL,OAAO,GAAG,MAAH,GAAY,KAAhC;;AAEA,QAAIF,KAAK,GAAG,CAAZ,EAAe;AACbM,MAAAA,UAAU,GAAI,IAAGN,KAAM,EAAvB;AACD;;AAED,QAAIQ,SAAS,GAAGD,IAAI,GAAGD,UAAvB;AACA,UAAMG,EAAE,GAAG,EAAX;;AAEA,QAAIL,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKM,SAA9B,EAAyC;AACvCD,MAAAA,EAAE,CAACE,IAAH,CAAS,QAAOpB,YAAY,CAACa,IAAD,CAAO,EAAnC;AACD;;AAED,QAAKC,KAAD,IAAW,IAAf,EAAqB;AACnB,YAAM;AAAEO,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAmBR,KAAzB;AAEAI,MAAAA,EAAE,CAACE,IAAH,CAAS,SAAQC,IAAK,EAAtB;;AAEA,UAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBJ,QAAAA,EAAE,CAACE,IAAH,CAAS,eAAcE,KAAM,EAA7B;AACD;AACF;;AAED,QAAIJ,EAAE,CAACK,MAAP,EAAe;AACbN,MAAAA,SAAS,GAAI,GAAEA,SAAU,IAAGC,EAAE,CAACM,IAAH,CAAQ,GAAR,CAAa,EAAzC;AACD;;AAED,QAAIb,OAAJ,EAAa;AACXH,MAAAA,QAAQ,CAACiB,GAAT,CAAaR,SAAb,EAAwBN,OAAxB,EAAiCe,kBAAkB,CAACd,IAAD,CAAnD;AACA,YAAMe,GAAG,GAAGjB,KAAK,GAAGC,OAAO,CAACiB,IAA5B;AACArB,MAAAA,KAAK,CAACa,IAAN,CAAW;AAAES,QAAAA,IAAI,EAAEjB,IAAR;AAAckB,QAAAA,KAAK,EAAEpB,KAArB;AAA4BiB,QAAAA;AAA5B,OAAX;AACAjB,MAAAA,KAAK,GAAGiB,GAAR;AACD,KALD,MAKO;AACLnB,MAAAA,QAAQ,CAACiB,GAAT,CAAaR,SAAb,EAAwB,IAAIhB,IAAJ,CAAS,CAAC,EAAD,CAAT,EAAeyB,kBAAkB,CAACd,IAAD,CAAjC,EAAyC;AAAEI,QAAAA,IAAI,EAAE;AAAR,OAAzC,CAAxB;AACD;;AAEDP,IAAAA,KAAK;AACN;;AAED,SAAO;AACLC,IAAAA,KADK;AAELH,IAAAA,KAFK;AAGLD,IAAAA,OAHK;AAILyB,IAAAA,IAAI,EAAEvB;AAJD,GAAP;AAMD;;AAEDwB,MAAM,CAACC,OAAP,GAAiB9B,gBAAjB","sourcesContent":["'use strict'\n\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input/index.browser')\nconst modeToString = require('./mode-to-string')\nconst { File, FormData } = require('ipfs-utils/src/globalthis')\n\nasync function multipartRequest (source = '', abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, encodeURIComponent(path))\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n\nmodule.exports = multipartRequest\n"]},"metadata":{},"sourceType":"script"}