{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport * as util from \"ethereumjs-util\";\nimport '../App.css';\nimport user from '../abis/user.json';\nimport NavBar from '../Components/NavBar';\nimport Main from '../Components/Main';\nimport User from '../Components/User'; //Declare IPFS\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  apiPath: '/api/v0'\n}); // leaving out the arguments will default to these values\n\nconsole.log(ipfs);\n\nconst crypto = require('crypto');\n\nclass Dashboard extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3.providers.HttpProvider(\"127.0.0.1:9545\");\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3; // Load account\n\n    const accounts = await web3.eth.getAccounts(); // var signing_address = await web3.eth.personal.ecRecover(hash, signature)\n    // console.log(signing_address)\n    // this.setState({ account: accounts[0] })\n    // var unitbal = await web3.eth.getBalance(accounts[0])\n    // vaar balanceacc = await web3.utils.fromWei(unitbal,'ether')\n\n    this.setState({\n      balance: balanceacc\n    });\n    const networkId = await web3.eth.net.getId();\n    const networkData = user.networks[networkId]; // console.log(networkData);\n\n    let reqCounts = 0,\n        imgCounts = 0,\n        rideCounts = 0;\n\n    if (networkData) {\n      const user1 = new web3.eth.Contract(user.abi, networkData.address); // console.log(user1); \n\n      this.setState({\n        user1\n      });\n      const reqCountsPromise = user1.methods.reqCount().call();\n      reqCountsPromise.then(reqCount => {\n        reqCounts = reqCount;\n      });\n      this.setState({\n        rideCounts\n      });\n      const imgCountsPromise = user1.methods.imgCount().call();\n      imgCountsPromise.then(imgCount => {\n        imgCounts = imgCount;\n      });\n      this.setState({\n        imgCounts\n      });\n      const rideCountsPromise = user1.methods.rideCount().call();\n      rideCountsPromise.then(rideCount => {\n        rideCounts = rideCount;\n      });\n      this.setState({\n        reqCounts\n      });\n\n      for (var i = 0; i <= reqCounts; i++) {\n        const users_var = await user1.methods.users(i).call();\n        this.setState({\n          users: [...this.state.users, users_var]\n        });\n      } //Load images\n\n\n      for (var j = 0; j <= imgCounts; j++) {\n        const img_var = await user1.methods.driver(1).call();\n        this.setState({\n          driver: [...this.state.driver, img_var]\n        });\n      }\n      /** */\n\n\n      for (var k = 0; k <= rideCounts; k++) {\n        const ride_var = await user1.methods.ride(k).call();\n        console.log(ride_var);\n        this.setState({\n          ride: [...this.state.ride, ride_var]\n        });\n      } //var message = \"Some string\"\n\n\n      var message = crypto.randomBytes(20).toString('hex');\n      var hash = web3.utils.sha3(message);\n      const data = await web3.eth.personal.sign(hash, accounts[0]); // console.log(data)\n\n      this.setState({\n        signature: data\n      });\n      this.setState({\n        message: message\n      });\n      var nonce = \"\\0x19Ethereum Signed Message:\\n\" + this.state.signature.length + this.state.signature;\n      nonce = util.keccak(Buffer.from(nonce, \"utf-8\"));\n      const {\n        v,\n        r,\n        s\n      } = util.fromRpcSig(this.state.signature);\n      const pubKey = util.ecrecover(util.toBuffer(nonce), v, r, s);\n      const addrBuf = util.pubToAddress(pubKey);\n      const addr = util.bufferToHex(addrBuf); // console.log(addr)\n\n      var message_hash = web3.utils.sha3(this.state.message);\n      var signing_address = await web3.eth.personal.ecRecover(message_hash, this.state.signature);\n      this.setState({\n        signing_address: signing_address\n      });\n      this.setState({\n        account: signing_address\n      });\n      var unitbal = await web3.eth.getBalance(this.state.account); // console.log(unitbal)\n\n      var balanceacc = await web3.utils.fromWei(unitbal, 'ether');\n      this.setState({\n        balance: balanceacc\n      });\n    } else {\n      window.alert('User contract not deployed to detected network.');\n    }\n  } // captureFile = event => {\n  //   event.preventDefault()\n  //   const file = event.target.files[0]\n  //   const reader = new window.FileReader()\n  //   reader.readAsArrayBuffer(file)\n  //   reader.onloadend = () => {\n  //     this.setState({ buffer: Buffer(reader.result) })\n  //     console.log('buffer', this.state.buffer)\n  //   }\n  // }\n\n\n  constructor(props) {\n    super(props);\n\n    this.rideReq = (source, destination, date, time) => {\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.rideReq(source, destination, date, time).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadRide = (source, destination, date, time, rider, amount) => {\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.uploadRide(source, destination, date, time, rider, amount).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.tipImageOwner = (id, tipAmount) => {\n      this.setState({\n        loading: true\n      });\n      this.setState({\n        loading: false\n      });\n      this.state.cryptridez.methods.tipImageOwner(id).send({\n        from: this.state.account,\n        value: tipAmount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.rideAmount = (id, amount) => {\n      this.state.user1.methods.ridePayment(id).send({\n        from: this.state.account,\n        value: amount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.state = {\n      balance: '',\n      account: '',\n      user1: null,\n      users: [],\n      driver: [],\n      ride: [],\n      signature: '',\n      message: '',\n      signing_address: '',\n      loading: true,\n      email: '',\n      buffer: '',\n      img: []\n    }; // props.sendValuestoApp(this.state.signing_address,this.state.balance)\n  } // componentDidUpdate(prevProps)\n  // {\n  //   // console.log(prevProps)\n  // console.log(this.props.sendValuetoApp())\n  // }\n  // props.sendValuestoApp()\n\n\n  render() {\n    var _this$state, _this$state2;\n\n    let body;\n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236'.toLowerCase(), '0x3d876A0BfFBCd490a6D23202ac2b5D66A26942A1'.toLowerCase()];\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9'.toLowerCase()];\n    var email = sessionStorage.getItem('login');\n    var domain = email.substring(email.lastIndexOf(\"@\") + 1); // console.log(domain.length)\n    // console.log(this.state.buffer)\n    // console.log(this.state.buffer, this.state.img)\n\n    if (authorizedAccounts.includes(this.state.signing_address) && domain === \"drivercryptridez.com\") {\n      body = /*#__PURE__*/_jsxDEV(Main, {\n        account: this.state.signing_address,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadRide: this.uploadRide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this);\n    } else {\n      body = /*#__PURE__*/_jsxDEV(User, {\n        account: this.state.signing_address,\n        rideReq: this.rideReq,\n        users: this.state.users,\n        uploadRide: this.uploadRide,\n        ride: this.state.ride,\n        rideAmount: this.rideAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this);\n    } // console.log(this.props, this.state.signing_address,this.state.balance)\n\n\n    this.props.sendValuestoApp((_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.signing_address, (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : _this$state2.balance);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js"],"names":["React","Component","Web3","Identicon","util","user","NavBar","Main","User","ipfsClient","require","ipfs","host","port","protocol","apiPath","console","log","crypto","Dashboard","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","providers","HttpProvider","alert","accounts","eth","getAccounts","setState","balance","balanceacc","networkId","net","getId","networkData","networks","reqCounts","imgCounts","rideCounts","user1","Contract","abi","address","reqCountsPromise","methods","reqCount","call","then","imgCountsPromise","imgCount","rideCountsPromise","rideCount","i","users_var","users","state","j","img_var","driver","k","ride_var","ride","message","randomBytes","toString","hash","utils","sha3","data","personal","sign","signature","nonce","length","keccak","Buffer","from","v","r","s","fromRpcSig","pubKey","ecrecover","toBuffer","addrBuf","pubToAddress","addr","bufferToHex","message_hash","signing_address","ecRecover","account","unitbal","getBalance","fromWei","constructor","props","rideReq","source","destination","date","time","loading","send","on","uploadRide","rider","amount","tipImageOwner","id","tipAmount","cryptridez","value","rideAmount","ridePayment","email","buffer","img","render","body","authorizedAccounts","toLowerCase","authorizedAccounts2","sessionStorage","getItem","domain","substring","lastIndexOf","includes","captureFile","uploadImage","sendValuestoApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport * as util from \"ethereumjs-util\";\nimport '../App.css';\nimport user from '../abis/user.json'\nimport NavBar from '../Components/NavBar'\nimport Main from '../Components/Main'\n\nimport User from '../Components/User'\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https',apiPath:'/api/v0'}) // leaving out the arguments will default to these values\nconsole.log(ipfs)\nconst crypto=require('crypto')\n\nclass Dashboard extends Component {\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3.providers.HttpProvider(\"127.0.0.1:9545\")\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    \n    // var signing_address = await web3.eth.personal.ecRecover(hash, signature)\n\n    // console.log(signing_address)\n    // this.setState({ account: accounts[0] })\n    // var unitbal = await web3.eth.getBalance(accounts[0])\n    // vaar balanceacc = await web3.utils.fromWei(unitbal,'ether')\n\n    this.setState({balance: balanceacc})\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = user.networks[networkId]\n    // console.log(networkData);\n    let reqCounts=0,imgCounts=0,rideCounts=0;\n\n    if (networkData) {\n      const user1 = new web3.eth.Contract(user.abi, networkData.address)\n      // console.log(user1); \n\n      this.setState({ user1 })\n\n\n      const reqCountsPromise =  user1.methods.reqCount().call()\n\n      \n      reqCountsPromise.then((reqCount) => {\n        reqCounts=reqCount\n      })\n\n      this.setState({ rideCounts })\n\n      \n      const imgCountsPromise =  user1.methods.imgCount().call()\n\n      \n      imgCountsPromise.then((imgCount) => {\n        imgCounts=imgCount\n      }\n\n      )\n\n      this.setState({ imgCounts })\n\n     \n      const rideCountsPromise =  user1.methods.rideCount().call()\n\n      rideCountsPromise.then((rideCount) => {\n        rideCounts=rideCount\n      })\n\n\n      this.setState({ reqCounts })\n     \n      for (var i = 0; i <= reqCounts; i++) {\n        const users_var = await user1.methods.users(i).call()\n\n        this.setState({\n          users: [...this.state.users,users_var]\n        })\n      }\n\n      //Load images\n      \n      for (var j=0; j<=imgCounts; j++){\n        const img_var = await user1.methods.driver(1).call()\n\n        \n        this.setState({\n          driver: [...this.state.driver,img_var]\n        })\n      }\n     /** */\n\n     for (var k=0; k<=rideCounts; k++){\n      const ride_var = await user1.methods.ride(k).call()\n      console.log(ride_var);\n\n      this.setState({\n        ride: [...this.state.ride,ride_var]\n      })\n\n      \n    }\n\n\n    //var message = \"Some string\"\n    var message = crypto.randomBytes(20).toString('hex');\n    var hash = web3.utils.sha3(message)\n    const data=await web3.eth.personal.sign(hash, accounts[0])\n    // console.log(data)\n    this.setState({\n      signature: data\n    })\n      this.setState({\n        message: message\n      })\n    var nonce = \"\\0x19Ethereum Signed Message:\\n\" + this.state.signature.length + this.state.signature\n    nonce = util.keccak(Buffer.from(nonce, \"utf-8\"))\n    const { v, r, s } = util.fromRpcSig(this.state.signature)\n    const pubKey = util.ecrecover(util.toBuffer(nonce), v, r, s)\n    const addrBuf = util.pubToAddress(pubKey)\n    const addr = util.bufferToHex(addrBuf)\n    // console.log(addr)\n\n    var message_hash=web3.utils.sha3(this.state.message)\n\n    var signing_address = await web3.eth.personal.ecRecover(message_hash,this.state.signature)\n\n    this.setState({\n      signing_address: signing_address\n    })\n   \n    this.setState({ account: signing_address })\n    var unitbal = await web3.eth.getBalance(this.state.account)\n    // console.log(unitbal)\n    var balanceacc = await web3.utils.fromWei(unitbal,'ether')\n\n    this.setState({balance: balanceacc})\n\n\n    } else {\n      window.alert('User contract not deployed to detected network.')\n    }\n\n  }\n\n  \n  // captureFile = event => {\n\n  //   event.preventDefault()\n  //   const file = event.target.files[0]\n  //   const reader = new window.FileReader()\n  //   reader.readAsArrayBuffer(file)\n\n  //   reader.onloadend = () => {\n  //     this.setState({ buffer: Buffer(reader.result) })\n  //     console.log('buffer', this.state.buffer)\n  //   }\n  // }\n\n  \n\n  rideReq = (source,destination,date,time) => {\n    this.setState({loading:true })\n      this.state.user1.methods.rideReq(source,destination,date,time).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  uploadRide = (source,destination,date,time,rider,amount) => {\n    this.setState({loading:true })\n      this.state.user1.methods.uploadRide(source,destination,date,time,rider,amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  \n\n  // uploadImaging = (drivername,hash,verified) =>\n  // {\n  //   this.state.user1.methods.uploadImage(hash,drivername,verified).send({from: this.state.account}).on('transactionHash',(hash) => {\n  //     this.setState({loading:false})\n  //   })\n\n  // }\n\n  // async uploadImage(drivername){\n  //   console.log(\"submitting file to ipfs...\")\n  //   // console.log('IN upload image',this.state.buffer)\n  //    await ipfs.add(this.state?.buffer, (error, result) => {\n  //     console.log('Ipfs result', result)\n  //     if (error) {\n  //       console.error(error)\n  //       // console.log('Ipfs result', this.result[0].hash)\n  //       return\n  //     }\n  //   // console.log('Ipfs result', this.result[0].hash)\n  //   // console.log('Ipfs result', this.result[0].hash)\n  //     this.setState({loading:true})\n  //     this.state.user1.methods.uploadImg(result[0].hash,drivername,false).send({from: this.state.account}).on('transactionHash',(hash) => {\n  //       this.setState({loading:false})\n  //       this.setState({img:result[0].hash})\n  //       console.log('Ipfs result', result)\n\n  //       console.log('Ipfs result', this.state.img)\n  //     })\n  //   })\n  // }\n\n  // verifyDriver = (id,hashs,name,author) => {\n\n  // this.state.user1.methods.verifyDriver(id,hashs,name,author).send({from: this.state.account}).on('transactionHash',(hash) => {\n  //   this.setState({loading:false})\n  // })\n  // }\n\n  tipImageOwner = (id, tipAmount) =>{\n    this.setState({ loading: true })\n    this.setState({ loading: false })\n    this.state.cryptridez.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  rideAmount = (id,amount) =>{\n    this.state.user1.methods.ridePayment(id).send({ from: this.state.account, value: amount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  \n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      balance:'',\n      account: '',\n      user1: null,\n      users:[],\n      driver:[],\n      ride:[],\n      signature:'',\n      message:'',\n      signing_address:'',\n      loading: true,\n      email:'',\n      buffer:'',\n      \n      img:[]\n    }\n    // props.sendValuestoApp(this.state.signing_address,this.state.balance)\n\n  }\n\n  // componentDidUpdate(prevProps)\n  // {\n  //   // console.log(prevProps)\n    // console.log(this.props.sendValuetoApp())\n  // }\n  \n  // props.sendValuestoApp()\n\n  render() {\n\n    let body\n    \n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236'.toLowerCase(),'0x3d876A0BfFBCd490a6D23202ac2b5D66A26942A1'.toLowerCase()]\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9'.toLowerCase()]\n\n    var email=sessionStorage.getItem('login')\n    var domain = email.substring(email.lastIndexOf(\"@\")+1);\n    // console.log(domain.length)\n    // console.log(this.state.buffer)\n    // console.log(this.state.buffer, this.state.img)\n\n        if(authorizedAccounts.includes(this.state.signing_address) && domain===\"drivercryptridez.com\"){\n          \n          body = \n          <Main\n          account={this.state.signing_address}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadRide = {this.uploadRide}\n        />\n        }\n        else{\n          body = \n          <User\n          account = {this.state.signing_address}\n          rideReq = {this.rideReq} \n          users={this.state.users}\n          uploadRide = {this.uploadRide}\n          ride = {this.state.ride}\n          rideAmount = {this.rideAmount}\n          />\n                  }\n\n                  // console.log(this.props, this.state.signing_address,this.state.balance)\n                  this.props.sendValuestoApp(this.state?.signing_address,this.state?.balance)\n\n    return (\n      <div>\n        {/* <NavBar account={this.state.signing_address}\n        balance= {this.state.balance} /> */}\n        { body }\n\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}