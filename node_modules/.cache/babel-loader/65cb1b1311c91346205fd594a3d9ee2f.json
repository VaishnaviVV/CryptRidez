{"ast":null,"code":"'use strict';\n\nconst modeToString = require('../lib/mode-to-string');\n\nconst {\n  mtimeToObject\n} = require('ipfs-core-utils/src/files/normalise-input/utils');\n\nconst configure = require('../lib/configure');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  anySignal\n} = require('any-signal');\n\nconst AbortController = require('native-abort-controller');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/write')>}\n   */\n  async function write(path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    const res = await api.post('files/write', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(await multipartRequest({\n        content: input,\n        path: 'arg',\n        mode: modeToString(options.mode),\n        mtime: mtimeToObject(options.mtime)\n      }, controller, options.headers))\n    });\n    await res.text();\n  }\n\n  return write;\n});","map":{"version":3,"sources":["/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/node_modules/ipfs-http-client/src/files/write.js"],"names":["modeToString","require","mtimeToObject","configure","multipartRequest","toUrlSearchParams","anySignal","AbortController","module","exports","api","write","path","input","options","controller","signal","res","post","timeout","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","text"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,uBAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,OAAO,CAAC,iDAAD,CAAjC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAgBL,OAAO,CAAC,YAAD,CAA7B;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,yBAAD,CAA/B;;AAEAO,MAAM,CAACC,OAAP,GAAiBN,SAAS,CAACO,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,KAAf,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmCC,OAAO,GAAG,EAA7C,EAAiD;AAC/C;AACA,UAAMC,UAAU,GAAG,IAAIR,eAAJ,EAAnB;AACA,UAAMS,MAAM,GAAGV,SAAS,CAAC,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAAD,CAAxB;AAEA,UAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,aAAT,EAAwB;AACxCC,MAAAA,OAAO,EAAEL,OAAO,CAACK,OADuB;AAExCH,MAAAA,MAFwC;AAGxCI,MAAAA,YAAY,EAAEf,iBAAiB,CAAC;AAC9BgB,QAAAA,GAAG,EAAET,IADyB;AAE9BU,QAAAA,cAAc,EAAE,IAFc;AAG9BC,QAAAA,KAAK,EAAET,OAAO,CAACU,MAHe;AAI9B,WAAGV;AAJ2B,OAAD,CAHS;AASxC,UACE,MAAMV,gBAAgB,CAAC;AACrBqB,QAAAA,OAAO,EAAEZ,KADY;AAErBD,QAAAA,IAAI,EAAE,KAFe;AAGrBc,QAAAA,IAAI,EAAE1B,YAAY,CAACc,OAAO,CAACY,IAAT,CAHG;AAIrBC,QAAAA,KAAK,EAAEzB,aAAa,CAACY,OAAO,CAACa,KAAT;AAJC,OAAD,EAKnBZ,UALmB,EAKPD,OAAO,CAACc,OALD,CADxB;AATwC,KAAxB,CAAlB;AAmBA,UAAMX,GAAG,CAACY,IAAJ,EAAN;AACD;;AAED,SAAOlB,KAAP;AACD,CAhCyB,CAA1B","sourcesContent":["'use strict'\n\nconst modeToString = require('../lib/mode-to-string')\nconst { mtimeToObject } = require('ipfs-core-utils/src/files/normalise-input/utils')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { anySignal } = require('any-signal')\nconst AbortController = require('native-abort-controller')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/files/write')>}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('files/write', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest({\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: mtimeToObject(options.mtime)\n        }, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return write\n})\n"]},"metadata":{},"sourceType":"script"}