{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport '../App.css';\nimport user from '../abis/user.json';\nimport AuthNavBar from '../Components/AuthNavBar';\nimport Main from '../Components/Main';\nimport DriverID from '../Components/DriverID';\nimport User from '../Components/User'; //Declare IPFS\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  apiPath: '/ipfs/api/v0'\n}); // leaving out the arguments will default to these values\n\nclass Dashboard extends Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3.providers.HttpProvider(\"127.0.0.1:9545\");\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3; // Load account\n\n    const accounts = await web3.eth.getAccounts();\n    var signing_address = await web3.eth.personal.ecRecover(hash, signature);\n    console.log(signing_address);\n    this.setState({\n      account: accounts[0]\n    });\n    const unitbal = await web3.eth.getBalance(accounts[0]);\n    const balanceacc = await web3.utils.fromWei(unitbal, 'ether');\n    this.setState({\n      balance: balanceacc\n    });\n    const networkId = await web3.eth.net.getId();\n    const networkData = user.networks[networkId]; // console.log(networkData);\n\n    let reqCounts = 0,\n        imgCounts = 0,\n        rideCounts = 0;\n\n    if (networkData) {\n      const user1 = new web3.eth.Contract(user.abi, networkData.address);\n      console.log(user1);\n      this.setState({\n        user1\n      });\n      const reqCountsPromise = user1.methods.reqCount().call();\n      reqCountsPromise.then(reqCount => {\n        reqCounts = reqCount;\n      });\n      this.setState({\n        rideCounts\n      });\n      const imgCountsPromise = user1.methods.imgCount().call();\n      imgCountsPromise.then(imgCount => {\n        imgCounts = imgCount;\n      });\n      this.setState({\n        imgCounts\n      });\n      const rideCountsPromise = user1.methods.rideCount().call();\n      rideCountsPromise.then(rideCount => {\n        rideCounts = rideCount;\n      });\n      this.setState({\n        reqCounts\n      });\n\n      for (var i = 0; i <= reqCounts; i++) {\n        const users_var = await user1.methods.users(i).call();\n        this.setState({\n          users: [...this.state.users, users_var]\n        });\n      } //Load images\n\n\n      for (var j = 0; j <= imgCounts; j++) {\n        const img_var = await user1.methods.driver(j).call();\n        this.setState({\n          driver: [...this.state.driver, img_var]\n        });\n      }\n      /** */\n\n\n      for (var k = 0; k <= rideCounts; k++) {\n        const ride_var = await user1.methods.ride(k).call();\n        console.log(ride_var);\n        this.setState({\n          ride: [...this.state.ride, ride_var]\n        });\n      }\n    } else {\n      window.alert('User contract not deployed to detected network.');\n    }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.rideReq = (source, destination, date, time) => {\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.rideReq(source, destination, date, time).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadRide = (source, destination, date, time, rider, amount) => {\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.uploadRide(source, destination, date, time, rider, amount).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadImaging = (drivername, hash, verified) => {\n      this.state.user1.methods.uploadImage(hash, drivername, verified).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadImage = drivername => {\n      console.log(\"submitting file to ipfs...\");\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('Ipfs result', result[0].hash);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        console.log('Ipfs result', this.result[0].hash);\n        this.setState({\n          loading: true\n        });\n        this.state.user1.methods.uploadImg(result[0].hash, drivername, false).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.verifyDriver = (id, hashs, name, author) => {\n      this.state.user1.methods.verifyDriver(id, hashs, name, author).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.tipImageOwner = (id, tipAmount) => {\n      this.setState({\n        loading: true\n      });\n      this.setState({\n        loading: false\n      });\n      this.state.cryptridez.methods.tipImageOwner(id).send({\n        from: this.state.account,\n        value: tipAmount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.rideAmount = (id, amount) => {\n      this.state.user1.methods.ridePayment(id).send({\n        from: this.state.account,\n        value: amount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.state = {\n      balance: '',\n      account: '',\n      user1: null,\n      users: [],\n      driver: [],\n      ride: [],\n      loading: true\n    };\n  }\n\n  render() {\n    let body;\n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236'];\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9'];\n\n    if (authorizedAccounts.includes(this.state.account)) {\n      body = /*#__PURE__*/_jsxDEV(Main, {\n        account: this.state.account,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadRide: this.uploadRide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this);\n    } else if (authorizedAccounts2.includes(this.state.account)) {\n      body = /*#__PURE__*/_jsxDEV(DriverID, {\n        account: this.state.account,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadImaging: this.uploadImaging,\n        verifyDriver: this.verifyDriver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this);\n    } else {\n      body = /*#__PURE__*/_jsxDEV(User, {\n        account: this.state.account,\n        rideReq: this.rideReq,\n        users: this.state.users,\n        uploadRide: this.uploadRide,\n        ride: this.state.ride,\n        rideAmount: this.rideAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AuthNavBar, {\n        account: this.state.account,\n        balance: this.state.balance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), body]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js"],"names":["React","Component","Web3","Identicon","user","AuthNavBar","Main","DriverID","User","ipfsClient","require","ipfs","host","port","protocol","apiPath","Dashboard","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","providers","HttpProvider","alert","accounts","eth","getAccounts","signing_address","personal","ecRecover","hash","signature","console","log","setState","account","unitbal","getBalance","balanceacc","utils","fromWei","balance","networkId","net","getId","networkData","networks","reqCounts","imgCounts","rideCounts","user1","Contract","abi","address","reqCountsPromise","methods","reqCount","call","then","imgCountsPromise","imgCount","rideCountsPromise","rideCount","i","users_var","users","state","j","img_var","driver","k","ride_var","ride","constructor","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","rideReq","source","destination","date","time","loading","send","from","on","uploadRide","rider","amount","uploadImaging","drivername","verified","uploadImage","add","error","uploadImg","verifyDriver","id","hashs","name","author","tipImageOwner","tipAmount","cryptridez","value","rideAmount","ridePayment","render","body","authorizedAccounts","authorizedAccounts2","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport '../App.css';\nimport user from '../abis/user.json'\nimport AuthNavBar from '../Components/AuthNavBar'\nimport Main from '../Components/Main'\nimport DriverID from '../Components/DriverID'\n\nimport User from '../Components/User'\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https',apiPath: '/ipfs/api/v0' }) // leaving out the arguments will default to these values\n\n\nclass Dashboard extends Component {\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3.providers.HttpProvider(\"127.0.0.1:9545\")\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    \n    var signing_address = await web3.eth.personal.ecRecover(hash, signature)\n\n    console.log(signing_address)\n    this.setState({ account: accounts[0] })\n    const unitbal = await web3.eth.getBalance(accounts[0])\n    const balanceacc = await web3.utils.fromWei(unitbal,'ether')\n\n    this.setState({balance: balanceacc})\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = user.networks[networkId]\n    // console.log(networkData);\n    let reqCounts=0,imgCounts=0,rideCounts=0;\n\n    if (networkData) {\n      const user1 = new web3.eth.Contract(user.abi, networkData.address)\n      console.log(user1); \n\n      this.setState({ user1 })\n\n\n      const reqCountsPromise =  user1.methods.reqCount().call()\n\n      \n      reqCountsPromise.then((reqCount) => {\n        reqCounts=reqCount\n      })\n\n      this.setState({ rideCounts })\n\n      \n      const imgCountsPromise =  user1.methods.imgCount().call()\n\n      \n      imgCountsPromise.then((imgCount) => {\n        imgCounts=imgCount\n      }\n\n      )\n\n      this.setState({ imgCounts })\n\n     \n      const rideCountsPromise =  user1.methods.rideCount().call()\n\n      rideCountsPromise.then((rideCount) => {\n        rideCounts=rideCount\n      })\n\n\n      this.setState({ reqCounts })\n     \n      for (var i = 0; i <= reqCounts; i++) {\n        const users_var = await user1.methods.users(i).call()\n\n        this.setState({\n          users: [...this.state.users,users_var]\n        })\n      }\n\n      //Load images\n      \n      for (var j=0; j<=imgCounts; j++){\n        const img_var = await user1.methods.driver(j).call()\n\n        this.setState({\n          driver: [...this.state.driver,img_var]\n        })\n      }\n     /** */\n\n     for (var k=0; k<=rideCounts; k++){\n      const ride_var = await user1.methods.ride(k).call()\n      console.log(ride_var);\n\n      this.setState({\n        ride: [...this.state.ride,ride_var]\n      })\n    }\n\n    } else {\n      window.alert('User contract not deployed to detected network.')\n    }\n\n  }\n\n  \n  captureFile = event => {\n\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  \n\n  rideReq = (source,destination,date,time) => {\n    this.setState({loading:true })\n      this.state.user1.methods.rideReq(source,destination,date,time).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  uploadRide = (source,destination,date,time,rider,amount) => {\n    this.setState({loading:true })\n      this.state.user1.methods.uploadRide(source,destination,date,time,rider,amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  \n\n  uploadImaging = (drivername,hash,verified) =>\n  {\n    this.state.user1.methods.uploadImage(hash,drivername,verified).send({from: this.state.account}).on('transactionHash',(hash) => {\n      this.setState({loading:false})\n    })\n\n  }\n\n  uploadImage = drivername => {\n    console.log(\"submitting file to ipfs...\")\n\n     ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result[0].hash)\n      if (error) {\n        console.error(error)\n        return\n      }\n    console.log('Ipfs result', this.result[0].hash)\n\n    this.setState({loading:true})\n      this.state.user1.methods.uploadImg(result[0].hash,drivername,false).send({from: this.state.account}).on('transactionHash',(hash) => {\n        this.setState({loading:false})\n      })\n    })\n  }\n\n  verifyDriver = (id,hashs,name,author) => {\n\n  this.state.user1.methods.verifyDriver(id,hashs,name,author).send({from: this.state.account}).on('transactionHash',(hash) => {\n    this.setState({loading:false})\n  })\n  }\n\n  tipImageOwner = (id, tipAmount) =>{\n    this.setState({ loading: true })\n    this.setState({ loading: false })\n    this.state.cryptridez.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  rideAmount = (id,amount) =>{\n    this.state.user1.methods.ridePayment(id).send({ from: this.state.account, value: amount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      balance:'',\n      account: '',\n      user1: null,\n      users:[],\n      driver:[],\n      ride:[],\n      loading: true,\n\n    }\n   \n  }\n  \n\n  render() {\n    let body\n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236']\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9']\n        if(authorizedAccounts.includes(this.state.account)){\n          \n          body = \n          <Main\n          account={this.state.account}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadRide = {this.uploadRide}\n        />\n        }\n        else if(authorizedAccounts2.includes(this.state.account)){\n          body = \n          <DriverID\n          account={this.state.account}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadImaging = {this.uploadImaging}\n          verifyDriver = {this.verifyDriver}\n        />\n\n        }\n        else{\n          body = \n          <User\n          account = {this.state.account}\n          rideReq = {this.rideReq} \n          users={this.state.users}\n          uploadRide = {this.uploadRide}\n          ride = {this.state.ride}\n          rideAmount = {this.rideAmount}\n          />\n                  }\n    \n    return (\n      <div>\n        <AuthNavBar account={this.state.account}\n        balance= {this.state.balance} />\n        { body }\n\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}