{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport '../App.css';\nimport user from '../abis/user.json';\nimport AuthNavBar from '../Components/AuthNavBar';\nimport Main from '../Components/Main';\nimport DriverID from '../Components/DriverID';\nimport User from '../Components/User'; //Declare IPFS\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      const file = event.target.files[0];\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.rideReq = (source, destination, date, time) => {\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.rideReq(source, destination, date, time).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadRide = (source, destination, date, time, rider, amount) => {\n      this.setState({\n        loading: true\n      });\n      this.state.user1.methods.uploadRide(source, destination, date, time, rider, amount).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadImaging = (drivername, hash, verified) => {\n      this.state.user1.methods.uploadImage(hash, drivername, verified).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.uploadImage = drivername => {\n      console.log(\"submitting file to ipfs...\");\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('Ipfs result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        this.setState({\n          loading: true\n        });\n        this.state.user1.methods.uploadImg(result[0].hash, drivername, false).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.verifyDriver = (id, hashs, name, author) => {\n      this.state.user1.methods.verifyDriver(id, hashs, name, author).send({\n        from: this.state.account\n      }).on('transactionHash', hash => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.tipImageOwner = (id, tipAmount) => {\n      this.setState({\n        loading: true\n      });\n      this.setState({\n        loading: false\n      });\n      this.state.cryptridez.methods.tipImageOwner(id).send({\n        from: this.state.account,\n        value: tipAmount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.rideAmount = (id, amount) => {\n      this.state.user1.methods.ridePayment(id).send({\n        from: this.state.account,\n        value: amount\n      }).on('transactionHash', hash => {});\n    };\n\n    this.state = {\n      balance: '',\n      account: '',\n      user1: null,\n      users: [],\n      driver: [],\n      ride: [],\n      loading: true\n    };\n  }\n\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3; // Load account\n\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    const unitbal = await web3.eth.getBalance(accounts[0]);\n    const balanceacc = await web3.utils.fromWei(unitbal, 'ether');\n    this.setState({\n      balance: balanceacc\n    });\n    const networkId = await web3.eth.net.getId();\n    const networkData = user.networks[networkId];\n    console.log(networkData);\n\n    if (networkData) {\n      const user1 = new web3.eth.Contract(user.abi, networkData.address);\n      console.log(user1);\n      this.setState({\n        user1\n      });\n      const reqCounts = await user1.methods.reqCount().call();\n      this.setState({\n        reqCounts\n      });\n      const imgCounts = await user1.methods.imgCount().call();\n      this.setState({\n        imgCounts\n      });\n      const rideCounts = await user1.methods.rideCount().call();\n      this.setState({\n        rideCounts\n      }); //Load requests\n\n      for (var i = 1; i <= reqCounts; i++) {\n        const users_var = await user1.methods.users(i).call();\n        this.setState({\n          users: [...this.state.users, users_var]\n        });\n      } //Load images\n\n\n      for (var j = 1; j <= imgCounts; j++) {\n        const img_var = await user1.methods.driver(j).call();\n        console.log(img_var);\n        this.setState({\n          driver: [...this.state.driver, img_var]\n        });\n      }\n      /** */\n\n\n      for (var k = 1; k <= rideCounts; k++) {\n        const ride_var = await user1.methods.ride(k).call();\n        this.setState({\n          ride: [...this.state.ride, ride_var]\n        });\n      }\n    } else {\n      window.alert('User contract not deployed to detected network.');\n    }\n  }\n\n  render() {\n    let body;\n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236'];\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9'];\n    const authorized = authorizedAccounts.includes(this.state.account);\n\n    if (authorizedAccounts.includes(this.state.account)) {\n      body = /*#__PURE__*/_jsxDEV(Main, {\n        account: this.state.account,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadRide: this.uploadRide\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this);\n    } else if (authorizedAccounts2.includes(this.state.account)) {\n      body = /*#__PURE__*/_jsxDEV(DriverID, {\n        account: this.state.account,\n        users: this.state.users,\n        driver: this.state.driver,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        uploadImaging: this.uploadImaging,\n        verifyDriver: this.verifyDriver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this);\n    } else {\n      body = /*#__PURE__*/_jsxDEV(User, {\n        account: this.state.account,\n        rideReq: this.rideReq,\n        users: this.state.users,\n        uploadRide: this.uploadRide,\n        ride: this.state.ride,\n        rideAmount: this.rideAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AuthNavBar, {\n        account: this.state.account,\n        balance: this.state.balance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), body]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/narendraomprakash/Desktop/Narendra/Semester-V-FALL2021/PDC/J-Component/Integrated-CryptRidez/src/Pages/Dashboard.js"],"names":["React","Component","Web3","Identicon","user","AuthNavBar","Main","DriverID","User","ipfsClient","require","ipfs","host","port","protocol","Dashboard","constructor","props","captureFile","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","rideReq","source","destination","date","time","loading","user1","methods","send","from","account","on","hash","uploadRide","rider","amount","uploadImaging","drivername","verified","uploadImage","add","error","uploadImg","verifyDriver","id","hashs","name","author","tipImageOwner","tipAmount","cryptridez","value","rideAmount","ridePayment","balance","users","driver","ride","componentWillMount","loadWeb3","loadBlockchainData","ethereum","web3","enable","currentProvider","alert","accounts","eth","getAccounts","unitbal","getBalance","balanceacc","utils","fromWei","networkId","net","getId","networkData","networks","Contract","abi","address","reqCounts","reqCount","call","imgCounts","imgCount","rideCounts","rideCount","i","users_var","j","img_var","k","ride_var","render","body","authorizedAccounts","authorizedAccounts2","authorized","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport '../App.css';\nimport user from '../abis/user.json'\nimport AuthNavBar from '../Components/AuthNavBar'\nimport Main from '../Components/Main'\nimport DriverID from '../Components/DriverID'\n\nimport User from '../Components/User'\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      balance:'',\n      account: '',\n      user1: null,\n      users:[],\n      driver:[],\n      ride:[],\n      loading: true,\n      \n    }\n  }\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    \n\n    this.setState({ account: accounts[0] })\n    const unitbal = await web3.eth.getBalance(accounts[0])\n    const  balanceacc = await web3.utils.fromWei(unitbal,'ether')\n\n    this.setState({balance: balanceacc})\n\n    const networkId = await web3.eth.net.getId()\n    const networkData = user.networks[networkId]\n    console.log(networkData);\n\n    if (networkData) {\n      const user1 = new web3.eth.Contract(user.abi, networkData.address)\n      console.log(user1);\n\n      this.setState({ user1 })\n\n      const reqCounts = await user1.methods.reqCount().call()\n      this.setState({ reqCounts })\n      \n      const imgCounts = await user1.methods.imgCount().call()\n      this.setState({ imgCounts })\n\n      const rideCounts = await user1.methods.rideCount().call()\n      this.setState({ rideCounts })\n      \n      //Load requests\n      for (var i = 1; i <= reqCounts; i++) {\n        const users_var = await user1.methods.users(i).call()\n\n        this.setState({\n          users: [...this.state.users,users_var]\n        })\n      }\n\n      //Load images\n\n      for (var j=1; j<=imgCounts; j++){\n        const img_var = await user1.methods.driver(j).call()\n        console.log(img_var);\n\n        this.setState({\n          driver: [...this.state.driver,img_var]\n        })\n      }\n     /** */\n\n     for (var k=1; k<=rideCounts; k++){\n      const ride_var = await user1.methods.ride(k).call()\n      this.setState({\n        ride: [...this.state.ride,ride_var]\n      })\n    }\n\n    } else {\n      window.alert('User contract not deployed to detected network.')\n    }\n\n  }\n\n  \n  captureFile = event => {\n\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  \n\n  rideReq = (source,destination,date,time) => {\n    this.setState({loading:true })\n      this.state.user1.methods.rideReq(source,destination,date,time).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  uploadRide = (source,destination,date,time,rider,amount) => {\n    this.setState({loading:true })\n      this.state.user1.methods.uploadRide(source,destination,date,time,rider,amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n  }\n\n  \n\n  uploadImaging = (drivername,hash,verified) =>\n  {\n    this.state.user1.methods.uploadImage(hash,drivername,verified).send({from: this.state.account}).on('transactionHash',(hash) => {\n      this.setState({loading:false})\n    })\n\n  }\n\n  uploadImage = drivername => {\n    console.log(\"submitting file to ipfs...\")\n\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      if (error) {\n        console.error(error)\n        return\n      }\n\n    this.setState({loading:true})\n      this.state.user1.methods.uploadImg(result[0].hash,drivername,false).send({from: this.state.account}).on('transactionHash',(hash) => {\n        this.setState({loading:false})\n      })\n    })\n  }\n\n  verifyDriver = (id,hashs,name,author) => {\n\n  this.state.user1.methods.verifyDriver(id,hashs,name,author).send({from: this.state.account}).on('transactionHash',(hash) => {\n    this.setState({loading:false})\n  })\n  }\n\n  tipImageOwner = (id, tipAmount) =>{\n    this.setState({ loading: true })\n    this.setState({ loading: false })\n    this.state.cryptridez.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  rideAmount = (id,amount) =>{\n    this.state.user1.methods.ridePayment(id).send({ from: this.state.account, value: amount }).on('transactionHash', (hash) => {\n    })\n  }\n\n  \n\n  \n\n  render() {\n    let body\n    const authorizedAccounts = ['0x50Fe6C433c41595396044A9bcdF9500963D4e236']\n    const authorizedAccounts2 = ['0x2fb5eBC35A6d6e7c26bEC01122b34d84D7727aD9']\n    const authorized = authorizedAccounts.includes(this.state.account)\n        if(authorizedAccounts.includes(this.state.account)){\n          \n          body = \n          <Main\n          account={this.state.account}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadRide = {this.uploadRide}\n        />\n        }\n        else if(authorizedAccounts2.includes(this.state.account)){\n          body = \n          <DriverID\n          account={this.state.account}\n          users={this.state.users}\n          driver={this.state.driver}\n          captureFile={this.captureFile}\n          uploadImage={this.uploadImage}\n          uploadImaging = {this.uploadImaging}\n          verifyDriver = {this.verifyDriver}\n        />\n\n        }\n        else{\n          body = \n          <User\n          account = {this.state.account}\n          rideReq = {this.rideReq} \n          users={this.state.users}\n          uploadRide = {this.uploadRide}\n          ride = {this.state.ride}\n          rideAmount = {this.rideAmount}\n          \n          />\n                  }\n    \n    return (\n      <div>\n        <AuthNavBar account={this.state.account}\n        balance= {this.state.balance} />\n        { body }\n\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}